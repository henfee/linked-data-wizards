// Generated by CoffeeScript 1.7.1

/*
Copyright (C) 2014 Kompetenzzentrum fuer wissensbasierte Anwendungen und Systeme
Forschungs- und Entwicklungs GmbH (Know-Center), Graz, Austria
office@know-center.at

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

(function() {
  var abort_all_ajax_calls, add_batch_of_cells_to_results_table, add_cells_to_results_table, add_column_for_given_predicate, add_column_handler, add_columns, add_columns_based_on_data_structure, add_columns_based_on_dimensions_and_measures, add_columns_for_all_dimensions, add_columns_for_all_measures, add_not_empty_filter_handler, add_uri_filter_handler, are_we_in_dataset_mode, clear_results, count_filters, create_aggregated_dataset_handler, dataset_compare_checkbox_click, dataset_compare_viswizard_click, debug, edit_date_filter_handler, edit_datetime_filter_handler, edit_numeric_filter_handler, edit_search_filter_handler, external_login_handler, external_mindmap_metadata_submit_handler, external_prepare_table_for_cubification, external_save_and_redirect_handler, external_vis_dataset_handler, focus_handler, get_additional_subjects, get_and_add_predicates_used_by_subjects, get_and_display_the_dataset_label, get_and_display_the_datasets_of_the_selected_endpoint, get_and_save_cube_dimensions_and_measures, get_batch_of_additional_subjects, get_date_filter_for_predicate, get_datetime_filter_for_predicate, get_not_empty_filter_for_predicate, get_numeric_filter_for_predicate, get_search_filter_for_predicate, get_the_objects, get_the_subjects, get_uri_filter_for_predicate, guess_and_set_column_types, htmlEncode, initial_search, is_predicate_already_displayed, is_predicate_already_in_data_structure, load_more_results_handler, log_sparql_query_runtime, prepare_data_and_add_to_cells, remove_column_handler, remove_filter_handler, set_cube_column_types, shorten_uri, submit_edit_date_filter_handler, submit_edit_datetime_filter_handler, submit_edit_numeric_filter_handler, submit_edit_search_filter_handler, submit_search_form_handler, ui_aggregate_more_values_handler, ui_change_dataset_endpoint_selector_handler, ui_clear_spinner, ui_dataset_metadata_modal_shown_handler, ui_date_filter_modal_shown_handler, ui_datetime_filter_modal_shown_handler, ui_display_front_page_alert, ui_display_results_page_alert, ui_display_spinner, ui_display_the_front_page, ui_display_the_results_page, ui_dummy_cube_info_handler, ui_get_and_display_the_total_results_count, ui_group_by_column_handler, ui_hide_screencast_modal_handler, ui_jsonld_modal_show_handler, ui_mindmap_metadata_modal_shown_handler, ui_mm_modal_handler, ui_numeric_filter_modal_shown_handler, ui_search_filter_modal_shown_handler, ui_show_aggregate_modal, ui_show_aggregate_modal_handler, ui_show_save_data_to_42_modal_handler, ui_show_save_query_to_42_modal_handler, ui_show_screencast_modal_handler, ui_show_vis_generic_modal_handler, ui_sparql_runtime_modal_show_handler, ui_sparql_toggle_handler, ui_update_the_load_more_results_area, ui_update_the_results_count, ui_validate_aggregate_dimensions_handler, ui_validate_aggregate_measures_handler, ui_validate_dataset_metadata_handler, ui_validate_mindmap_metadata_handler, update_the_address, url_change_handler,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(function() {

    /*
    Set global constants
     */
    $('body').data('DEBUG', false);
    $('body').data('BATCH_SIZE', 10);
    $('body').data('BIG_LOAD_SIZE', 100);
    $('body').data('ERROR_CANNOT_REMOVE_LAST_FILTER', "This is the last filter.\nTherefore, you cannot remove it.\nSorry about that.");

    /*
    Set global variables
     */
    $('body').data('xhrPool', []);

    /*
    Initialize data structures
     */
    $('body').data('endpoint', '');
    $('body').data('search_type', 'regex');
    $('body').data('subjects', []);
    $('body').data('predicates', []);
    $('body').data('dataset', '');
    $('body').data('dimensions', {});
    $('body').data('measures', {});
    $('body').data('total_results_count', 0);

    /*
    Register event handlers
     */
    $.address.externalChange(url_change_handler);
    $(document).on('submit', '#search_form', submit_search_form_handler);
    $(document).on('click', 'th .add_not_empty_filter', add_not_empty_filter_handler);
    $(document).on('click', 'th .add_date_filter', edit_date_filter_handler);
    $(document).on('click', 'th .add_datetime_filter', edit_datetime_filter_handler);
    $(document).on('click', 'th .add_numeric_filter', edit_numeric_filter_handler);
    $(document).on('click', 'th .add_search_filter', edit_search_filter_handler);
    $(document).on('click', 'td .add_uri_filter', add_uri_filter_handler);
    $(document).on('click', 'th .edit_date_filter', edit_date_filter_handler);
    $(document).on('click', 'th .edit_datetime_filter', edit_datetime_filter_handler);
    $(document).on('click', 'th .edit_numeric_filter', edit_numeric_filter_handler);
    $(document).on('submit', '#date_filter_modal form', submit_edit_date_filter_handler);
    $(document).on('submit', '#datetime_filter_modal form', submit_edit_datetime_filter_handler);
    $(document).on('submit', '#numeric_filter_modal form', submit_edit_numeric_filter_handler);
    $(document).on('click', 'th .edit_search_filter', edit_search_filter_handler);
    $(document).on('submit', '#search_filter_modal form', submit_edit_search_filter_handler);
    $(document).on('click', 'th .remove_filter', remove_filter_handler);
    $(document).on('click', 'td .focus', focus_handler);
    $(document).on('click', '.add_predicate', add_column_handler);
    $(document).on('click', '#load_more button', load_more_results_handler);
    $(document).on('click', '.remove_predicate', remove_column_handler);
    $(document).on('click', '#aggregate_create', create_aggregated_dataset_handler);
    $(document).on('change', '#dataset_endpoint_selector', ui_change_dataset_endpoint_selector_handler);
    $(document).on('click', '.cube_info', ui_dummy_cube_info_handler);
    $(document).on('hidden.bs.modal', '#screencast_modal', ui_hide_screencast_modal_handler);
    $(document).on('shown.bs.modal', '#date_filter_modal', ui_date_filter_modal_shown_handler);
    $(document).on('shown.bs.modal', '#datetime_filter_modal', ui_datetime_filter_modal_shown_handler);
    $(document).on('shown.bs.modal', '#numeric_filter_modal', ui_numeric_filter_modal_shown_handler);
    $(document).on('shown.bs.modal', '#search_filter_modal', ui_search_filter_modal_shown_handler);
    $(document).on('shown.bs.modal', '#dataset_metadata_modal', ui_dataset_metadata_modal_shown_handler);
    $(document).on('shown.bs.modal', '#mindmap_metadata_modal', ui_mindmap_metadata_modal_shown_handler);
    $(document).on('show.bs.modal', '#mm_modal', ui_mm_modal_handler);
    $(document).on('show.bs.modal', '#screencast_modal', ui_show_screencast_modal_handler);
    $(document).on('show.bs.modal', '#sparql_runtime_modal', ui_sparql_runtime_modal_show_handler);
    $(document).on('show.bs.modal', '#jsonld_modal', ui_jsonld_modal_show_handler);
    $(document).on('click', '#menu_aggregate_dataset a', ui_show_aggregate_modal_handler);
    $(document).on('click', '#menu_save_data_to_42 a', ui_show_save_data_to_42_modal_handler);
    $(document).on('click', '#menu_save_query_to_42 a', ui_show_save_query_to_42_modal_handler);
    $(document).on('click', '#menu_vis_generic a', ui_show_vis_generic_modal_handler);
    $(document).on('change', '#aggregate_dimensions input', ui_validate_aggregate_dimensions_handler);
    $(document).on('change', '#aggregate_measures select', ui_validate_aggregate_measures_handler);
    $(document).on('keyup', '#dataset_metadata_modal input', ui_validate_dataset_metadata_handler);
    $(document).on('keyup', '#dataset_metadata_modal textarea', ui_validate_dataset_metadata_handler);
    $(document).on('keyup', '#mindmap_metadata_modal input', ui_validate_mindmap_metadata_handler);
    $(document).on('click', '#aggregate_more_values', ui_aggregate_more_values_handler);
    $(document).on('click', '.group_by_column', ui_group_by_column_handler);
    $(document).on('click', '.sparql_toggle', ui_sparql_toggle_handler);
    $(document).on('click', '#login', external_login_handler);
    $(document).on('click', '#menu_vis_dataset a', external_vis_dataset_handler);
    $(document).on('submit', '#dataset_metadata_modal form', external_save_and_redirect_handler);
    $(document).on('submit', '#mindmap_metadata_modal form', external_mindmap_metadata_submit_handler);
    $(document).on('click', '#dataset_list .compare', dataset_compare_checkbox_click);
    $(document).on('click', '#viscompare_button', dataset_compare_viswizard_click);

    /*
    Collect all outstanding AJAX requests in an xhrPool
     */
    $(document).ajaxSend(function(event, jqXHR, options) {
      $('body').data('xhrPool').push(jqXHR);
      return debug("" + ($('body').data('xhrPool').length) + " AJAX call(s) in progress");
    });
    return $(document).ajaxComplete(function(event, jqXHR, options) {
      var xhrIndex;
      xhrIndex = $('body').data('xhrPool').indexOf(jqXHR);
      if (xhrIndex > -1) {
        $('body').data('xhrPool').splice(xhrIndex, 1);
      }
      return debug("" + ($('body').data('xhrPool').length) + " AJAX call(s) in progress");
    });
  });


  /*
  Event Handlers - Search
   */

  url_change_handler = function(event) {
    var index, key, login_location, value, _ref;
    abort_all_ajax_calls();
    $('body').data('dataset', '');
    $('body').data('endpoint', '');
    $('body').data('search_type', 'regex');
    $('body').data('dimensions', {});
    $('body').data('measures', {});
    $('body').data('predicates', []);
    $('body').data('subjects', []);
    $('ul#available_predicates').empty();
    $('#dataset_title_input').val('');
    $('#dataset_description_input').val('');
    $('#results_page').hide();
    $('#navbar_container').hide();
    $('#results tr').remove();
    $('#load_more').html('');
    $('#dataset_title').hide();
    $('#add_column').hide();
    $('#results_count').hide();
    ui_clear_spinner();
    if (event.parameterNames.length === 0) {
      $('body').data('endpoint', 'http://open-data.europa.eu/en/sparqlep');
      return ui_display_the_front_page();
    } else if (__indexOf.call(event.parameterNames, 'userId') >= 0) {
      login_location = '/qa?target=query&userId=' + event.parameters.userId;
      if (__indexOf.call(event.parameterNames, 'dataset') >= 0) {
        login_location += '&dataset=' + event.parameters.endpoint;
      }
      if (__indexOf.call(event.parameterNames, 'endpoint') >= 0) {
        login_location += '&endpoint=' + event.parameters.endpoint;
      }
      return window.location.href = login_location;
    } else {
      _ref = event.parameters;
      for (key in _ref) {
        value = _ref[key];
        if (/^dataset$/.test(key)) {
          $('body').data('dataset', decodeURIComponent(value));
        } else if (/^p[0-9]+$/.test(key)) {
          $('body').data('predicates').push({
            uri: decodeURIComponent(value)
          });
        } else if (/^p[0-9]+i$/.test(key)) {
          index = key.match(/[0-9]+/)[0];
          $('body').data('predicates')[index]['inverse'] = decodeURIComponent(value) === 'true';
        } else if (/^p[0-9]+ft$/.test(key)) {
          index = key.match(/[0-9]+/)[0];
          $('body').data('predicates')[index]['filter_type'] = decodeURIComponent(value);
        } else if (/^p[0-9]+fv$/.test(key)) {
          index = key.match(/[0-9]+/)[0];
          $('body').data('predicates')[index]['filter_value'] = decodeURIComponent(value);
        } else if (/^p[0-9]+fl$/.test(key)) {
          index = key.match(/[0-9]+/)[0];
          $('body').data('predicates')[index]['filter_label'] = decodeURIComponent(value);
        } else if (/^endpoint$/.test(key)) {
          $('body').data('endpoint', decodeURIComponent(value));
        } else if (/^searchtype$/.test(key)) {
          $('body').data('search_type', decodeURIComponent(value));
        }
      }
      if ($('body').data('endpoint') && !are_we_in_dataset_mode() && $('body').data('predicates').length === 0) {
        return ui_display_the_front_page();
      } else {
        if (!$('body').data('endpoint')) {
          $('body').data('endpoint', 'code');
        }
        return $.when(initial_search()).done(function(data) {
          return debug(data);
        });
      }
    }
  };

  submit_search_form_handler = function(event) {
    var label_uri, search_term;
    event.preventDefault();
    if (!$('#q').val()) {
      return;
    }
    $('body').data('endpoint', $('#ep :selected').val());
    $('body').data('search_type', $('#ep :selected').attr('data-search-type'));
    search_term = $('#q').val();
    search_term = search_term.replace(/\"/g, '');
    if ($('body').data('search_type') === 'regex') {
      search_term = search_term.replace(/[ ]/g, '.*');
    }
    $('body').data('predicates', []);
    label_uri = 'http://www.w3.org/2000/01/rdf-schema#label';
    if ($('#ep').val() === 'http://europeana.ontotext.com/sparql' || $('#ep').val() === 'http://linkedlifedata.com/sparql') {
      label_uri = 'http://purl.org/dc/elements/1.1/title';
    }
    $('body').data('predicates').push({
      'uri': label_uri,
      'inverse': false,
      'filter_type': 'search',
      'filter_value': search_term
    });
    $('body').data('predicates').push({
      'uri': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',
      'inverse': false
    });
    return $.when(initial_search()).done(function(data) {
      return debug(data);
    });
  };

  submit_edit_date_filter_handler = function(event) {
    var filter_label, max, min, p_index;
    event.preventDefault();
    abort_all_ajax_calls();
    p_index = $('#date_filter_predicate_index').val();
    min = $('#date_filter_input_min').val();
    max = $('#date_filter_input_max').val();
    if (min && max) {
      filter_label = "" + min + "–" + max;
    } else if (min) {
      filter_label = "&ge; " + min;
    } else if (max) {
      filter_label = "&le; " + max;
    }
    $('body').data('predicates')[p_index]['filter_type'] = 'date';
    $('body').data('predicates')[p_index]['filter_value'] = min + ',' + max;
    $('body').data('predicates')[p_index]['filter_label'] = filter_label;
    $("th:eq(" + p_index + ") .filter").html("<div class=\"dropdown\">\n  <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n  data-toggle=\"dropdown\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    " + filter_label + " <span class=\"caret\"></span>\n  </button>\n  <ul class=\"dropdown-menu\">\n    <li>\n      <a href=\"#\" class=\"edit_date_filter\">\n        <span class=\"glyphicon glyphicon-pencil\"></span>\n        Edit filter &hellip;\n      </a>\n    </li>\n    <li>\n      <a href=\"#\" class=\"remove_filter\">\n        <span class=\"glyphicon glyphicon-remove\"></span> Remove filter\n      </a>\n    </li>\n  </ul>\n</div>");
    $('#date_filter_modal').modal('hide');
    update_the_address();
    clear_results();
    $.when(ui_get_and_display_the_total_results_count()).done(function(data) {
      return debug(data);
    });
    return $.when(get_additional_subjects($('body').data('BATCH_SIZE'))).done(function(data) {
      return debug(data);
    });
  };

  submit_edit_datetime_filter_handler = function(event) {
    var filter_label, max, min, p_index;
    event.preventDefault();
    abort_all_ajax_calls();
    p_index = $('#datetime_filter_predicate_index').val();
    min = $('#datetime_filter_input_min').val();
    max = $('#datetime_filter_input_max').val();
    if (min.length === 16) {
      min += ':00';
    }
    if (max.length === 16) {
      max += ':00';
    }
    if (min && max) {
      filter_label = "" + min + "–" + max;
    } else if (min) {
      filter_label = "&ge; " + min;
    } else if (max) {
      filter_label = "&le; " + max;
    }
    $('body').data('predicates')[p_index]['filter_type'] = 'datetime';
    $('body').data('predicates')[p_index]['filter_value'] = min + ',' + max;
    $('body').data('predicates')[p_index]['filter_label'] = filter_label;
    $("th:eq(" + p_index + ") .filter").html("<div class=\"dropdown\">\n  <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n  data-toggle=\"dropdown\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    " + filter_label + " <span class=\"caret\"></span>\n  </button>\n  <ul class=\"dropdown-menu\">\n    <li>\n      <a href=\"#\" class=\"edit_datetime_filter\">\n        <span class=\"glyphicon glyphicon-pencil\"></span>\n        Edit filter &hellip;\n      </a>\n    </li>\n    <li>\n      <a href=\"#\" class=\"remove_filter\">\n        <span class=\"glyphicon glyphicon-remove\"></span> Remove filter\n      </a>\n    </li>\n  </ul>\n</div>");
    $('#datetime_filter_modal').modal('hide');
    update_the_address();
    clear_results();
    $.when(ui_get_and_display_the_total_results_count()).done(function(data) {
      return debug(data);
    });
    return $.when(get_additional_subjects($('body').data('BATCH_SIZE'))).done(function(data) {
      return debug(data);
    });
  };

  submit_edit_numeric_filter_handler = function(event) {
    var filter_label, max, min, p_index;
    event.preventDefault();
    abort_all_ajax_calls();
    p_index = $('#numeric_filter_predicate_index').val();
    min = $('#numeric_filter_input_min').val();
    max = $('#numeric_filter_input_max').val();
    if (min && max) {
      filter_label = "" + min + "–" + max;
    } else if (min) {
      filter_label = "&ge; " + min;
    } else if (max) {
      filter_label = "&le; " + max;
    }
    $('body').data('predicates')[p_index]['filter_type'] = 'numeric';
    $('body').data('predicates')[p_index]['filter_value'] = min + ',' + max;
    $('body').data('predicates')[p_index]['filter_label'] = filter_label;
    $("th:eq(" + p_index + ") .filter").html("<div class=\"dropdown\">\n  <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n  data-toggle=\"dropdown\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    " + filter_label + " <span class=\"caret\"></span>\n  </button>\n  <ul class=\"dropdown-menu\">\n    <li>\n      <a href=\"#\" class=\"edit_numeric_filter\">\n        <span class=\"glyphicon glyphicon-pencil\"></span>\n        Edit filter &hellip;\n      </a>\n    </li>\n    <li>\n      <a href=\"#\" class=\"remove_filter\">\n        <span class=\"glyphicon glyphicon-remove\"></span> Remove filter\n      </a>\n    </li>\n  </ul>\n</div>");
    $('#numeric_filter_modal').modal('hide');
    update_the_address();
    clear_results();
    $.when(ui_get_and_display_the_total_results_count()).done(function(data) {
      return debug(data);
    });
    return $.when(get_additional_subjects($('body').data('BATCH_SIZE'))).done(function(data) {
      return debug(data);
    });
  };

  submit_edit_search_filter_handler = function(event) {
    var p_index;
    event.preventDefault();
    $('#search_filter_modal').modal('hide');
    p_index = $('#search_filter_predicate_index').val();
    $('body').data('predicates')[p_index]['filter_type'] = 'search';
    $('body').data('predicates')[p_index]['filter_value'] = $('#search_filter_input').val();
    $('th').eq(p_index).find('.filter').html("<div class=\"dropdown\">\n  <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n  data-toggle=\"dropdown\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    \"" + ($('#search_filter_input').val()) + "\" <span class=\"caret\"></span>\n  </button>\n  <ul class=\"dropdown-menu\">\n    <li>\n      <a href=\"#\" class=\"edit_search_filter\"><span\n      class=\"glyphicon glyphicon-pencil\"></span> Edit filter &hellip;</a>\n    </li>\n    <li>\n      <a href=\"#\" class=\"remove_filter\"><span\n      class=\"glyphicon glyphicon-remove\"></span> Remove filter</a>\n    </li>\n  </ul>\n</div>");
    update_the_address();
    clear_results();
    $.when(ui_get_and_display_the_total_results_count()).done(function(data) {
      return debug(data);
    });
    return $.when(get_additional_subjects($('body').data('BATCH_SIZE'))).done(function(data) {
      return debug(data);
    });
  };

  add_not_empty_filter_handler = function(event) {
    var predicate_index;
    event.preventDefault();
    abort_all_ajax_calls();
    predicate_index = $(event.target).closest("th").prevAll("th").length;
    $('body').data('predicates')[predicate_index]['filter_type'] = 'not_empty';
    $('body').data('predicates')[predicate_index]['filter_value'] = 1;
    $("th:eq(" + predicate_index + ") .filter").html("<div class=\"dropdown\">\n  <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n  data-toggle=\"dropdown\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    Hide empty results <span class=\"caret\"></span>\n  </button>\n  <ul class=\"dropdown-menu\">\n    <li>\n      <a href=\"#\" class=\"remove_filter\">\n        <span class=\"glyphicon glyphicon-remove\"></span> Remove filter\n      </a>\n    </li>\n  </ul>\n</div>");
    $("th:eq(" + predicate_index + ") .title .not_empty_filter").remove();
    update_the_address();
    clear_results();
    $.when(ui_get_and_display_the_total_results_count()).done(function(data) {
      return debug(data);
    });
    return $.when(get_additional_subjects($('body').data('BATCH_SIZE'))).done(function(data) {
      return debug(data);
    });
  };

  add_uri_filter_handler = function(event) {
    var predicate_index;
    event.preventDefault();
    abort_all_ajax_calls();
    predicate_index = $(this).closest("td").prevAll("td").length;
    $('body').data('predicates')[predicate_index]['filter_type'] = 'uri';
    $('body').data('predicates')[predicate_index]['filter_value'] = $(this).parent().parent().siblings('button').first().attr('data-uri');
    $('body').data('predicates')[predicate_index]['filter_label'] = $(this).parent().parent().siblings('button').first().text().trim();
    $("th[data-uri=\"" + ($(this).closest('td').attr('data-p')) + "\"] .filter").html("<div class=\"dropdown\">\n  <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n  data-toggle=\"dropdown\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    " + ($(this).parent().parent().siblings('button').first().text()) + "\n    <span class=\"caret\"></span>\n  </button>\n  <ul class=\"dropdown-menu\">\n    <li>\n      <a href=\"#\" class=\"remove_filter\"><span\n      class=\"glyphicon glyphicon-remove\"></span> Remove filter</a>\n    </li>\n  </ul>\n</div>");
    update_the_address();
    clear_results();
    $.when(ui_get_and_display_the_total_results_count()).done(function(data) {
      return debug(data);
    });
    return $.when(get_additional_subjects($('body').data('BATCH_SIZE'))).done(function(data) {
      return debug(data);
    });
  };

  remove_filter_handler = function(event) {
    var p_index;
    event.preventDefault();
    if (count_filters() === 1 && !are_we_in_dataset_mode()) {
      return alert($('body').data('ERROR_CANNOT_REMOVE_LAST_FILTER'));
    } else {
      p_index = $(this).closest("th").prevAll("th").length;
      if ($('body').data('predicates')[p_index]['filter_type'] === 'not_empty') {
        $("th:eq(" + p_index + ") .title ul").prepend("<li class=\"not_empty_filter\">\n  <a href=\"#\" class=\"add_not_empty_filter\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    Hide empty results\n  </a>\n</li>");
      }
      delete $('body').data('predicates')[p_index]['filter_type'];
      delete $('body').data('predicates')[p_index]['filter_value'];
      delete $('body').data('predicates')[p_index]['filter_label'];
      $(this).closest('th').find('.filter').html('');
      update_the_address();
      clear_results();
      $.when(ui_get_and_display_the_total_results_count()).done(function(data) {
        return debug(data);
      });
      return $.when(get_additional_subjects($('body').data('BATCH_SIZE'))).done(function(data) {
        return debug(data);
      });
    }
  };

  focus_handler = function(event) {
    return event.preventDefault();
  };


  /*
  Event Handlers - Data Management
   */

  add_column_handler = function(event) {
    event.preventDefault();
    $.when(add_column_for_given_predicate({
      'uri': $(this).data('uri'),
      'inverse': $(this).data('inverse')
    })).done(function(data) {
      return debug(data);
    });
    return update_the_address();
  };

  load_more_results_handler = function(event) {
    event.preventDefault();
    $('#load_more button').attr('disabled', 'disabled');
    Spinners.create(event.target, {
      radius: 5,
      dashes: 12,
      width: 2,
      height: 5,
      opacity: 1,
      padding: 0,
      rotation: 600,
      color: '#ffffff'
    }).play();
    return $.when(get_additional_subjects($(event.target).attr('data-amount'))).done(function(data) {
      return debug(data);
    });
  };

  remove_column_handler = function(event) {
    var item, listitems, predicate, predicate_index, _i, _len;
    event.preventDefault();
    predicate_index = $(this).closest("th").prevAll("th").length;
    if (count_filters() === 1 && $('body').data('predicates')[predicate_index]['filter_value'] && !are_we_in_dataset_mode()) {
      return alert($('body').data('ERROR_CANNOT_REMOVE_LAST_FILTER'));
    } else {
      $("#results th:eq(" + predicate_index + ")").remove();
      $("#results tr").each(function(index, tr) {
        return $(tr).find("td:eq(" + predicate_index + ")").remove();
      });
      $('#available_predicates').append("<li>\n  <a\n    class=\"add_predicate\"\n    data-label=\"" + ($(this).closest('th').attr('data-label')) + "\"\n    data-uri=\"" + ($(this).closest('th').attr('data-uri')) + "\"\n    data-inverse=\"" + ($(this).closest('th').attr('data-inverse')) + "\"\n    title=\"" + ($(this).closest('th').attr('data-uri')) + "\"\n    href=\"#\">" + ($(this).closest('th').attr('data-label')) + "</a>\n</li>");
      listitems = $('#available_predicates').children('li').get().sort(function(a, b) {
        return $(a).text().toUpperCase().localeCompare($(b).text().toUpperCase());
      });
      for (_i = 0, _len = listitems.length; _i < _len; _i++) {
        item = listitems[_i];
        $('#available_predicates').append(item);
      }
      predicate = $('body').data('predicates').splice(predicate_index, 1);
      update_the_address();
      if (predicate[0]['filter_value']) {
        clear_results();
        $.when(ui_get_and_display_the_total_results_count()).done(function(data) {
          return debug(data);
        });
        return $.when(get_additional_subjects($('body').data('BATCH_SIZE'))).done(function(data) {
          return debug(data);
        });
      }
    }
  };

  create_aggregated_dataset_handler = function(event) {
    var aggregated_measure, aggregated_measures, checkbox, div, grouped_dimensions, _i, _j, _len, _len1, _ref, _ref1;
    $('#aggregate_create').attr('disabled', 'disabled');
    Spinners.create($('#aggregate_modal .spinner'), {
      radius: 5,
      dashes: 12,
      width: 2,
      height: 6,
      opacity: 1,
      padding: 0,
      rotation: 600,
      color: '#000000'
    }).play();
    grouped_dimensions = [];
    _ref = $('#aggregate_dimensions input:checked');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      checkbox = _ref[_i];
      grouped_dimensions.push({
        uri: $(checkbox).val(),
        label: $(checkbox).attr('data-label')
      });
    }
    aggregated_measures = [];
    _ref1 = $('#aggregate_measures div');
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      div = _ref1[_j];
      if ($(div).find('select.agg_function[value!="{}"]').length > 0) {
        aggregated_measure = JSON.parse($(div).find('select.agg_measure').first().val());
        aggregated_measure['function'] = $(div).find('select.agg_function').first().val();
        aggregated_measures.push(aggregated_measure);
      }
    }
    return $.when($.ajaxQueue({
      url: '/query/aggregate',
      type: 'POST',
      data: JSON.stringify({
        dataset_uri: $('body').data('dataset'),
        endpoint_url: $('body').data('endpoint'),
        search_type: $('body').data('search_type'),
        grouped_dimensions: grouped_dimensions,
        aggregated_measures: aggregated_measures,
        label: 'Aggregation of: ' + $('#dataset_label').text(),
        description: '',
        importer: $('#cubify_mendeley_id').val(),
        relation: 'Query Wizard',
        source: window.location.href
      })
    })).done(function(data) {
      var redirect_location;
      $('#aggregate_modal').modal('hide');
      redirect_location = '/search#?dataset=' + data.dataset;
      redirect_location += '&endpoint=' + data.endpoint;
      return window.location.href = redirect_location;
    });
  };


  /*
  Event Handlers - UI
   */

  ui_aggregate_more_values_handler = function(event) {
    return $('#aggregate_measures div').first().clone().appendTo($('#aggregate_measures'));
  };

  ui_change_dataset_endpoint_selector_handler = function(event) {
    $('body').data('endpoint', event.target.value);
    $.address.history(false);
    update_the_address();
    $.address.history(true);
    return get_and_display_the_datasets_of_the_selected_endpoint();
  };

  ui_dummy_cube_info_handler = function(event) {
    return event.preventDefault();
  };

  ui_group_by_column_handler = function(event) {
    event.preventDefault();
    return ui_show_aggregate_modal($(event.target).closest('th').attr('data-uri'));
  };

  ui_hide_screencast_modal_handler = function(event) {
    return $('#screencast_modal_body').html('');
  };

  ui_mm_modal_handler = function(event) {
    var button, cell, entry, header, header_row, headers, i, mm_json, root_child_count, row, row_index, xpos, ypos, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
    mm_json = {
      'map_version': '2.2',
      'keep_aligned': true,
      'root': {
        'title': $('#mindmap_title_input').val().trim(),
        'children': []
      }
    };
    headers = [];
    header_row = $('#results tr:first').clone();
    header_row.find('.filter').remove();
    _ref = $(header_row).find('.title button');
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      header = _ref[i];
      headers[i] = $(header).text().trim();
    }
    root_child_count = $('#results tr:gt(0)').length;
    _ref1 = $('#results tr:gt(0)');
    for (row_index = _j = 0, _len1 = _ref1.length; _j < _len1; row_index = ++_j) {
      row = _ref1[row_index];
      _ref2 = $(row).find('td:first');
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        cell = _ref2[_k];
        if (row_index < (root_child_count / 2)) {
          xpos = 10;
          ypos = 10 * row_index;
        } else {
          xpos = -10;
          ypos = 10 * (root_child_count - row_index);
        }
        if ($(cell).find('button').length > 0) {
          _ref3 = $(cell).find('button').first();
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            button = _ref3[_l];
            mm_json['root']['children'].push({
              'title': $(button).text().trim(),
              'pos': [xpos, ypos],
              'children': []
            });
          }
        } else {
          mm_json['root']['children'].push({
            'title': $(cell).text().trim(),
            'pos': [xpos, ypos],
            'children': []
          });
        }
      }
      _ref4 = $(row).find('td:gt(0)');
      for (i = _m = 0, _len4 = _ref4.length; _m < _len4; i = ++_m) {
        cell = _ref4[i];
        mm_json.root.children[mm_json.root.children.length - 1].children.push({
          'title': headers[i + 1],
          'children': []
        });
        if ($(cell).find('button').length > 0) {
          _ref5 = $(cell).find('button');
          for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
            button = _ref5[_n];
            mm_json.root.children[mm_json.root.children.length - 1].children[mm_json.root.children[mm_json.root.children.length - 1].children.length - 1].children.push({
              'title': $(button).text().trim()
            });
          }
        } else {
          _ref6 = $(cell).text().trim().split("\n");
          for (_o = 0, _len6 = _ref6.length; _o < _len6; _o++) {
            entry = _ref6[_o];
            if (!entry) {
              entry = "-";
            }
            mm_json.root.children[mm_json.root.children.length - 1].children[mm_json.root.children[mm_json.root.children.length - 1].children.length - 1].children.push({
              'title': entry.trim()
            });
          }
        }
      }
    }
    $('#mm_modal_body').html('');
    return MM.init("9fc50d8e8742c8b163512483b1f839f2", "https://www.mindmeister.com", "mm_modal_body", mm_json);
  };

  ui_show_screencast_modal_handler = function(event) {
    return $('#screencast_modal_body').html("<iframe width=\"853\" height=\"480\"\n  src=\"http://www.youtube.com/embed/0LZ87yj5jo8\"\n  frameborder=\"0\" allowfullscreen></iframe>");
  };

  ui_show_aggregate_modal_handler = function(event) {
    event.preventDefault();
    return ui_show_aggregate_modal();
  };

  ui_show_aggregate_modal = function(group_by_uri) {
    var dimension, dimension_list, dimension_uri, measure, measure_list, measure_selector, measure_uri, _i, _j, _len, _len1, _ref, _ref1;
    Spinners.remove($('#aggregate_modal .spinner'));
    $('#aggregate_modal').modal('show');
    $('#aggregate_measures').empty();
    $('#aggregate_dimensions').empty();
    $('#aggregate_dimension_error').show();
    $('#aggregate_measure_error').show();
    $('#aggregate_create').prop('disabled', true);
    dimension_list = [];
    _ref = $('body').data('dimensions');
    for (dimension_uri in _ref) {
      dimension = _ref[dimension_uri];
      dimension_list.push({
        uri: dimension_uri,
        label: dimension['label']
      });
    }
    dimension_list = dimension_list.sort(function(a, b) {
      if (a.label.toLowerCase() > b.label.toLowerCase()) {
        return 1;
      }
      if (a.label.toLowerCase() < b.label.toLowerCase()) {
        return -1;
      }
      return 0;
    });
    for (_i = 0, _len = dimension_list.length; _i < _len; _i++) {
      dimension = dimension_list[_i];
      $('#aggregate_dimensions').append("<div class=\"checkbox\">\n  <label>\n    <input type=\"checkbox\" data-label='" + dimension.label + "'\n    value='" + dimension.uri + "'> " + dimension.label + "\n  </label>\n</div>");
    }
    measure_list = [];
    _ref1 = $('body').data('measures');
    for (measure_uri in _ref1) {
      measure = _ref1[measure_uri];
      measure_list.push({
        uri: measure_uri,
        label: measure['label']
      });
    }
    measure_list = measure_list.sort(function(a, b) {
      if (a.label.toLowerCase() > b.label.toLowerCase()) {
        return 1;
      }
      if (a.label.toLowerCase() < b.label.toLowerCase()) {
        return -1;
      }
      return 0;
    });
    measure_selector = "<select class=\"form-control input-sm agg_measure\"\nstyle=\"width: 160px; display: inline-block;\">";
    for (_j = 0, _len1 = measure_list.length; _j < _len1; _j++) {
      measure = measure_list[_j];
      measure_selector += "<option value='{\"uri\": \"" + measure.uri + "\",\n\"label\": \"" + measure.label + "\"}'>" + measure.label + "</option>";
    }
    measure_selector += "</select>";
    $('#aggregate_measures').append("<div style=\"margin-top: 10px;\">\n  <select class=\"form-control input-sm agg_function\"\n  style=\"width: 100px; display: inline-block;\">\n    <option value='{}'>-</option>\n    <option value='avg'>Average</option>\n    <option value='count'>Count</option>\n    <option value='max'>Maximum</option>\n    <option value='min'>Minimum</option>\n    <option value='sum'>Sum</option>\n  </select> of\n  " + measure_selector + "\n</div>");
    if (group_by_uri) {
      $("#aggregate_dimensions input[value='" + group_by_uri + "']").prop('checked', true);
      return ui_validate_aggregate_dimensions_handler();
    }
  };

  ui_show_save_data_to_42_modal_handler = function(event) {
    event.preventDefault();
    $('#dataset_redirect').val('qa');
    $('#dataset_payload_type').val('data');
    return $('#dataset_metadata_modal').modal('show');
  };

  ui_show_save_query_to_42_modal_handler = function(event) {
    event.preventDefault();
    $('#dataset_redirect').val('qa');
    $('#dataset_payload_type').val('query');
    return $.ajax({
      url: '/query/get_comprehensive_sparql_query',
      type: 'POST',
      data: JSON.stringify({
        endpoint_url: $('body').data('endpoint'),
        search_type: $('body').data('search_type'),
        predicates: $('body').data('predicates'),
        dataset: $('body').data('dataset')
      })
    }).done(function(data) {
      $('#cubify_sparql_query').val(htmlEncode(data['query']));
      return $('#dataset_metadata_modal').modal('show');
    });
  };

  ui_show_vis_generic_modal_handler = function(event) {
    event.preventDefault();
    $('#dataset_redirect').val('vis');
    $('#dataset_payload_type').val('data');
    return $('#dataset_metadata_modal').modal('show');
  };

  ui_sparql_toggle_handler = function(event) {
    var current_textarea;
    event.preventDefault();
    current_textarea = $(this).parent().siblings('textarea').first().toggle();
    if (current_textarea.is(":visible")) {
      return $(this).find('.arrow').first().html('<span class="glyphicon glyphicon-chevron-down"></span>');
    } else {
      return $(this).find('.arrow').first().html('<span class="glyphicon glyphicon-chevron-right"></span>');
    }
  };

  edit_date_filter_handler = function(event) {
    var p_index;
    event.preventDefault();
    p_index = $(event.target).closest("th").prevAll("th").length;
    $('#date_filter_predicate_index').val(p_index);
    $('#date_filter_modal .target').html("<em>" + ($(event.target).closest('th').attr('data-label')) + "</em>");
    $('#date_filter_input_min').val('');
    $('#date_filter_input_max').val('');
    if ($('body').data('predicates')[p_index]['filter_type'] === 'date' && $('body').data('predicates')[p_index]['filter_value']) {
      $('#date_filter_input_min').val($('body').data('predicates')[p_index]['filter_value'].split(',')[0]);
      $('#date_filter_input_max').val($('body').data('predicates')[p_index]['filter_value'].split(',')[1]);
    }
    return $('#date_filter_modal').modal('show');
  };

  edit_datetime_filter_handler = function(event) {
    var p_index;
    event.preventDefault();
    p_index = $(event.target).closest("th").prevAll("th").length;
    $('#datetime_filter_predicate_index').val(p_index);
    $('#datetime_filter_modal .target').html("<em>" + ($(event.target).closest('th').attr('data-label')) + "</em>");
    $('#datetime_filter_input_min').val('');
    $('#datetime_filter_input_max').val('');
    if ($('body').data('predicates')[p_index]['filter_type'] === 'datetime' && $('body').data('predicates')[p_index]['filter_value']) {
      $('#datetime_filter_input_min').val($('body').data('predicates')[p_index]['filter_value'].split(',')[0]);
      $('#datetime_filter_input_max').val($('body').data('predicates')[p_index]['filter_value'].split(',')[1]);
    }
    return $('#datetime_filter_modal').modal('show');
  };

  edit_numeric_filter_handler = function(event) {
    var p_index;
    event.preventDefault();
    p_index = $(event.target).closest("th").prevAll("th").length;
    $('#numeric_filter_predicate_index').val(p_index);
    $('#numeric_filter_modal .target').html("<em>" + ($(event.target).closest('th').attr('data-label')) + "</em>");
    $('#numeric_filter_input_min').val('');
    $('#numeric_filter_input_max').val('');
    if ($('body').data('predicates')[p_index]['filter_type'] === 'numeric' && $('body').data('predicates')[p_index]['filter_value']) {
      $('#numeric_filter_input_min').val($('body').data('predicates')[p_index]['filter_value'].split(',')[0]);
      $('#numeric_filter_input_max').val($('body').data('predicates')[p_index]['filter_value'].split(',')[1]);
    }
    return $('#numeric_filter_modal').modal('show');
  };

  ui_date_filter_modal_shown_handler = function(event) {
    return $('#date_filter_input_min').select();
  };

  ui_datetime_filter_modal_shown_handler = function(event) {
    return $('#datetime_filter_input_min').select();
  };

  ui_numeric_filter_modal_shown_handler = function(event) {
    return $('#numeric_filter_input_min').select();
  };

  ui_dataset_metadata_modal_shown_handler = function(event) {
    return $('#dataset_title_input').select();
  };

  ui_mindmap_metadata_modal_shown_handler = function(event) {
    return $('#mindmap_title_input').select();
  };

  ui_jsonld_modal_show_handler = function(event) {
    var button, cell, col_index, jsonld, predicate, row, row_index, subject, subject_json, uri_list, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
    jsonld = {
      '@graph': []
    };
    _ref = $('body').data('subjects');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      subject = _ref[_i];
      subject_json = {
        '@id': "" + subject
      };
      jsonld['@graph'].push(subject_json);
    }
    _ref1 = $('#results tr:gt(0)');
    for (row_index = _j = 0, _len1 = _ref1.length; _j < _len1; row_index = ++_j) {
      row = _ref1[row_index];
      _ref2 = $(row).find('td');
      for (col_index = _k = 0, _len2 = _ref2.length; _k < _len2; col_index = ++_k) {
        cell = _ref2[col_index];
        predicate = $('body').data('predicates')[col_index];
        if ($(cell).find('button').length === 1) {
          jsonld['@graph'][row_index][predicate['uri']] = {
            '@id': $(cell).find('button').first().attr('data-uri')
          };
        } else if ($(cell).find('button').length > 1) {
          uri_list = [];
          _ref3 = $(cell).find('button');
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            button = _ref3[_l];
            uri_list.push({
              '@id': $(button).attr('data-uri')
            });
          }
          jsonld['@graph'][row_index][predicate['uri']] = uri_list;
        } else {
          if (predicate['cube_component_type'] === 'measure') {
            jsonld['@graph'][row_index][predicate['uri']] = Number($(cell).text().trim().replace(/\,/g, ''));
          } else {
            jsonld['@graph'][row_index][predicate['uri']] = $(cell).text().trim();
          }
        }
      }
    }
    return $('#jsonld textarea').html(JSON.stringify(jsonld, null, 2));
  };

  ui_sparql_runtime_modal_show_handler = function(event) {
    if ($('body').data('endpoint')) {
      $('#sparql_endpoint').html("<div style=\"font-weight: bold;\">Current SPARQL endpoint</div>\n<a href=\"" + ($('body').data('endpoint')) + "\"\ntarget=\"_blank\">" + ($('body').data('endpoint')) + "</a>\n<hr />");
    }
    return $.ajax({
      url: '/query/get_comprehensive_sparql_query',
      type: 'POST',
      data: JSON.stringify({
        endpoint_url: $('body').data('endpoint'),
        search_type: $('body').data('search_type'),
        predicates: $('body').data('predicates'),
        dataset: $('body').data('dataset')
      })
    }).done(function(data) {
      return $('#sparql_query').html("<div style=\"font-weight: bold;\">SPARQL query for the current\nselection</div>\n<textarea readonly=\"readonly\" style=\"width: 100%; height: 200px;\nmargin: 5px 0 10px 0;\">" + (htmlEncode(data['query'])) + "</textarea>\n<hr />");
    });
  };

  edit_search_filter_handler = function(event) {
    event.preventDefault();
    $('#search_filter_predicate_index').val($(event.target).closest("th").prevAll("th").length);
    $('#search_filter_modal .target').html("<em>" + ($(event.target).closest('th').attr('data-label')) + "</em>");
    $('#search_filter_input').val($(event.target).closest('.filter').find('button').first().text().replace(/\"/g, '').trim());
    return $('#search_filter_modal').modal('show');
  };

  ui_search_filter_modal_shown_handler = function(event) {
    return $('#search_filter_input').select();
  };

  ui_validate_aggregate_dimensions_handler = function(event) {
    var checked_dimensions, dimensions_count;
    dimensions_count = Object.keys($('body').data('dimensions')).length;
    checked_dimensions = $('#aggregate_dimensions input:checked').length;
    if ((0 < checked_dimensions && checked_dimensions < dimensions_count)) {
      $('#aggregate_dimension_error').hide();
      if (!$('#aggregate_measure_error').is(':visible')) {
        return $('#aggregate_create').prop('disabled', false);
      }
    } else {
      $('#aggregate_dimension_error').show();
      return $('#aggregate_create').prop('disabled', true);
    }
  };

  ui_validate_aggregate_measures_handler = function(event) {
    var selected;
    selected = $('#aggregate_measures select.agg_function[value!="{}"]').length;
    if (selected > 0) {
      $('#aggregate_measure_error').hide();
      if (!$('#aggregate_dimension_error').is(':visible')) {
        return $('#aggregate_create').prop('disabled', false);
      }
    } else {
      $('#aggregate_measure_error').show();
      return $('#aggregate_create').prop('disabled', true);
    }
  };

  ui_validate_dataset_metadata_handler = function(event) {
    if (!($('#dataset_title_input').val() && $('#dataset_description_input').val())) {
      return $('#dataset_metadata_submit').prop('disabled', true);
    } else {
      return $('#dataset_metadata_submit').prop('disabled', false);
    }
  };

  ui_validate_mindmap_metadata_handler = function(event) {
    if (!$('#mindmap_title_input').val()) {
      return $('#mindmap_metadata_submit').prop('disabled', true);
    } else {
      return $('#mindmap_metadata_submit').prop('disabled', false);
    }
  };


  /*
  Event Handlers - External Actions
   */

  external_login_handler = function(event) {
    return event.target.href += "?next=" + encodeURIComponent(window.location.pathname + window.location.search + window.location.hash);
  };

  external_prepare_table_for_cubification = function() {
    var p_index, results_table, results_table_html, th;
    results_table = $('#results').clone();
    results_table.find("[data-component='multivalue']").remove();
    results_table.find('button').each(function() {
      return $(this).replaceWith($(this).html().trim());
    });
    results_table.find('*').removeAttr('style');
    results_table.find('.dropdown-menu').remove();
    results_table.find('.filter').remove();
    results_table.find('br').remove();
    results_table.find('td[data-s]').each(function(index, td) {
      return $(td).attr('data-url', $(td).attr('data-s'));
    });
    th = results_table.find("th[data-uri=\"http://purl.org/linked-data/cube#dataSet\"]").first();
    if (th.length > 0) {
      p_index = th.prevAll("th").length;
      th.remove();
      results_table.find('tr').each(function(index, tr) {
        return $(tr).find('td:eq(' + p_index + ')').remove();
      });
    }
    results_table.find('th').each(function(index, th) {
      return $(th).replaceWith("<td data-url=\"" + ($(th).attr('data-uri')) + "\"\ndata-component=\"" + ($(th).attr('data-component')) + "\">\n  " + ($(th).html().trim()) + "\n</td>");
    });
    results_table.find('div').each(function(index, div) {
      return $(div).replaceWith($(div).html().trim());
    });
    results_table.find('span').each(function(index, span) {
      return $(span).replaceWith($(span).html().trim());
    });
    results_table.find('strong').each(function(index, span) {
      return $(span).replaceWith($(span).html().trim());
    });
    results_table.find('td:not(:has(p))').each(function(index, td) {
      return $(td).html('<p>' + $(td).html().trim() + '</p>');
    });
    results_table.html(results_table.html().replace(/(\r\n|\n|\r)/gm, ''));
    results_table.find('td[data-component="observation"] p').each(function(index, td) {
      return $(td).html($(td).html().replace(/\,/g, ''));
    });
    results_table.find('*').removeAttr('class');
    results_table_html = results_table.clone().wrap('<table>').parent().html();
    $('#cubify_html_table').val(results_table_html);
    return debug(results_table_html);
  };

  external_vis_dataset_handler = function(event) {
    return event.target.href = "/vis#" + window.location.hash.substring(1).replace(/\#/g, '%23');
  };

  external_mindmap_metadata_submit_handler = function(event) {
    event.preventDefault();
    if (!$('#mindmap_title_input').val()) {
      return;
    }
    $('#mindmap_metadata_modal').modal('hide');
    return $('#mm_modal').modal('show');
  };

  dataset_compare_checkbox_click = function(event) {
    if ($('#dataset_list .compare:checked').length > 0) {
      return $('#viscompare_button').show();
    } else {
      return $('#viscompare_button').hide();
    }
  };

  dataset_compare_viswizard_click = function(event) {
    var $datasets, counter, endpoint, url;
    event.preventDefault();
    endpoint = $('body').data('endpoint');
    $datasets = $('#dataset_list .compare:checked');
    url = "/vis#?";
    counter = 0;
    if ($datasets.length > 0) {
      $datasets.each(function(index, jqXHR) {
        url += ("&chart" + counter + "=&chartDsIn" + counter + "=" + counter + "&ds" + counter + "e=" + endpoint + "&ds" + counter + "u=") + $(this).data('dataset');
        return counter++;
      });
    }
    return document.location.href = url;
  };

  external_save_and_redirect_handler = function(event) {
    event.preventDefault();
    if (!($('#dataset_title_input').val() && $('#dataset_description_input').val())) {
      return;
    }
    $('#cubify_label').val($('#dataset_title_input').val());
    $('#results').attr('data-label', $('#dataset_title_input').val());
    $('#cubify_description').val($('#dataset_description_input').val());
    $('#results').attr('data-description', $('#dataset_description_input').val());
    $('#cubify_source').val(window.location.href);
    $('#results').attr('data-source', window.location.href);
    if ($('#dataset_payload_type').val() === 'data') {
      external_prepare_table_for_cubification();
      return $('#cubify_form').attr('action', '/query/save_data?redirect=' + $('#dataset_redirect').val()).submit();
    } else if ($('#dataset_payload_type').val() === 'query') {
      return $('#cubify_form').attr('action', '/query/save_query').submit();
    }
  };


  /*
  Helper Functions
   */

  abort_all_ajax_calls = function() {
    debug('Clearing the ajaxQueue');
    $.ajaxQueue.clear();
    if ($('body').data('xhrPool').length > 0) {
      debug("Aborting " + ($('body').data('xhrPool').length) + " AJAX call(s)");
      $.each($('body').data('xhrPool'), function(index, jqXHR) {
        if (jqXHR) {
          return jqXHR.abort();
        }
      });
      return $('body').data('xhrPool').length = 0;
    }
  };

  add_batch_of_cells_to_results_table = function(subjects, predicate) {
    var batch_id, batch_predicate, batch_subject, deferred, subject, time, _i, _len;
    deferred = $.Deferred();
    batch_subject = subjects[0].replace(/(http)s?\:\/\//g, '').replace(/[^a-zA-Z0-9]/g, '_');
    batch_predicate = predicate['uri'].replace(/(http)s?\:\/\//g, '').replace(/[^a-zA-Z0-9]/g, '_');
    time = new Date().getTime();
    batch_id = "batch_" + time + "__" + batch_predicate + "__" + batch_subject;
    for (_i = 0, _len = subjects.length; _i < _len; _i++) {
      subject = subjects[_i];
      $("#results tr[data-s=\"" + subject + "\"]").append("<td class=\"" + batch_id + "\" data-s=\"" + subject + "\" data-p=\"" + predicate['uri'] + "\"\ndata-inverse=\"" + predicate['inverse'] + "\"></td>");
    }
    Spinners.create("." + batch_id, {
      radius: 3,
      dashes: 10,
      width: 1,
      height: 3,
      opacity: 1,
      padding: 0,
      rotation: 600,
      color: '#000000'
    }).play();
    $.when(get_the_objects(subjects, predicate)).done(function(data) {
      log_sparql_query_runtime(data['runtime'], 'for getting the objects', data['query']);
      Spinners.get("." + batch_id).remove();
      if (data['objects'].length > 0) {
        guess_and_set_column_types(data);
        if (are_we_in_dataset_mode()) {
          set_cube_column_types(data);
        }
        prepare_data_and_add_to_cells(data);
        return deferred.resolve("Added " + data['objects'].length + " objects for " + predicate['uri'] + ",\ninverse " + predicate['inverse']);
      } else {
        return deferred.resolve("Received no objects for " + predicate['uri'] + ",\ninverse " + predicate['inverse']);
      }
    });
    return deferred.promise();
  };

  add_cells_to_results_table = function(subjects, predicate) {
    var batch_count, batch_counter, copied_subjects, deferred, sliced_subjects;
    deferred = $.Deferred();
    copied_subjects = subjects.slice(0);
    batch_counter = 0;
    batch_count = Math.ceil(subjects.length / $('body').data('BATCH_SIZE'));
    while (copied_subjects.length > 0) {
      if (copied_subjects.length > $('body').data('BATCH_SIZE')) {
        sliced_subjects = copied_subjects.slice(0, $('body').data('BATCH_SIZE'));
        copied_subjects = copied_subjects.slice($('body').data('BATCH_SIZE'));
      } else {
        sliced_subjects = copied_subjects.slice(0);
        copied_subjects.length = 0;
      }
      $.when(add_batch_of_cells_to_results_table(sliced_subjects, predicate)).done(function(data) {
        debug(data);
        batch_counter += 1;
        if (batch_counter === batch_count) {
          return deferred.resolve("Finished " + batch_counter + " batch(es) of getting objects");
        }
      });
    }
    return deferred.promise();
  };

  add_column_for_given_predicate = function(predicate) {
    var available_predicate, date_filter, datetime_filter, deferred, label, not_empty_filter, numeric_filter, search_term, subject, th, uri_filter, _i, _len, _ref;
    deferred = $.Deferred();
    if (!predicate['inverse']) {
      predicate['inverse'] = false;
    }
    available_predicate = $("#available_predicates a[data-uri=\"" + predicate['uri'] + "\"][data-inverse=\"" + predicate['inverse'] + "\"]");
    label = available_predicate.attr('data-label');
    if (!label) {
      label = shorten_uri(predicate['uri']);
    }
    available_predicate.parent().remove();
    if (!is_predicate_already_in_data_structure(predicate)) {
      $('body').data('predicates').push({
        'uri': predicate['uri'],
        'inverse': predicate['inverse']
      });
    }
    if ($('#results tr').length === 0) {
      $('#results').append('<tr></tr>');
      _ref = $('body').data('subjects');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subject = _ref[_i];
        $('#results').append("<tr data-s=\"" + subject + "\"></tr>");
      }
    }
    th = $("<th data-label=\"" + label + "\" data-uri=\"" + predicate['uri'] + "\"\ndata-inverse=\"" + predicate['inverse'] + "\" title=\"" + predicate['uri'] + "\">\n  <div class=\"btn-group navbar-left title\">\n    <button type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle\"\n    data-toggle=\"dropdown\" href=\"#\">\n      " + label + " <span class=\"caret\"></span>\n    </button>\n    <ul class=\"dropdown-menu\" style=\"text-align: left;\"></ul>\n  </div>\n  <div class=\"btn-group navbar-left filter\">\n  </div>\n</th>");
    $('#results tr:first').append(th);
    th.find("ul").first().append("<li>\n  <a class=\"remove_predicate\" href=\"#\">\n    <span class=\"glyphicon glyphicon-trash\"></span> Remove column\n  </a>\n</li>");
    search_term = get_search_filter_for_predicate(predicate);
    if (search_term) {
      th.find('.filter').html("<div class=\"dropdown\">\n  <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n  data-toggle=\"dropdown\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    \"" + search_term + "\" <span class=\"caret\"></span>\n  </button>\n  <ul class=\"dropdown-menu\">\n    <li>\n      <a href=\"#\" class=\"edit_search_filter\">\n        <span class=\"glyphicon glyphicon-pencil\"></span>\n        Edit filter &hellip;\n      </a>\n    </li>\n    <li>\n      <a href=\"#\" class=\"remove_filter\">\n        <span class=\"glyphicon glyphicon-remove\"></span>\n        Remove filter\n      </a>\n    </li>\n  </ul>\n</div>");
    }
    uri_filter = get_uri_filter_for_predicate(predicate);
    if (uri_filter) {
      if (!uri_filter['label']) {
        uri_filter['label'] = shorten_uri(uri_filter['value']);
      }
      th.find('.filter').html("<div class=\"dropdown\">\n  <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n  data-toggle=\"dropdown\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    " + uri_filter['label'] + " <span class=\"caret\"></span>\n  </button>\n  <ul class=\"dropdown-menu\">\n    <li>\n      <a href=\"#\" class=\"remove_filter\">\n        <span class=\"glyphicon glyphicon-remove\"></span> Remove filter\n      </a>\n    </li>\n  </ul>\n</div>");
    }
    date_filter = get_date_filter_for_predicate(predicate);
    if (date_filter) {
      th.find('.filter').html("<div class=\"dropdown\">\n  <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n    data-toggle=\"dropdown\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    " + date_filter['label'] + " <span class=\"caret\"></span>\n  </button>\n  <ul class=\"dropdown-menu\">\n    <li>\n      <a href=\"#\" class=\"edit_date_filter\">\n        <span class=\"glyphicon glyphicon-pencil\"></span>\n        Edit filter &hellip;\n      </a>\n    </li>\n    <li>\n      <a href=\"#\" class=\"remove_filter\">\n        <span class=\"glyphicon glyphicon-remove\"></span>\n        Remove filter\n      </a>\n    </li>\n  </ul>\n</div>");
    }
    datetime_filter = get_datetime_filter_for_predicate(predicate);
    if (datetime_filter) {
      th.find('.filter').html("<div class=\"dropdown\">\n  <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n  data-toggle=\"dropdown\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    " + datetime_filter['label'] + " <span class=\"caret\"></span>\n  </button>\n  <ul class=\"dropdown-menu\">\n    <li>\n      <a href=\"#\" class=\"edit_datetime_filter\">\n        <span class=\"glyphicon glyphicon-pencil\"></span>\n        Edit filter &hellip;\n      </a>\n    </li>\n    <li>\n      <a href=\"#\" class=\"remove_filter\">\n        <span class=\"glyphicon glyphicon-remove\"></span>\n        Remove filter\n      </a>\n    </li>\n  </ul>\n</div>");
    }
    numeric_filter = get_numeric_filter_for_predicate(predicate);
    if (numeric_filter) {
      th.find('.filter').html("<div class=\"dropdown\">\n  <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n  data-toggle=\"dropdown\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    " + numeric_filter['label'] + " <span class=\"caret\"></span>\n  </button>\n  <ul class=\"dropdown-menu\">\n    <li>\n      <a href=\"#\" class=\"edit_numeric_filter\">\n        <span class=\"glyphicon glyphicon-pencil\"></span>\n        Edit filter &hellip;\n      </a>\n    </li>\n    <li>\n      <a href=\"#\" class=\"remove_filter\">\n        <span class=\"glyphicon glyphicon-remove\"></span>\n        Remove filter\n      </a>\n    </li>\n  </ul>\n</div>");
    }
    not_empty_filter = get_not_empty_filter_for_predicate(predicate);
    if (not_empty_filter) {
      th.find('.filter').html("<div class=\"dropdown\">\n  <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n  data-toggle=\"dropdown\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    Hide empty results <span class=\"caret\"></span>\n  </button>\n  <ul class=\"dropdown-menu\">\n    <li>\n      <a href=\"#\" class=\"remove_filter\">\n        <span class=\"glyphicon glyphicon-remove\"></span> Remove filter\n      </a>\n    </li>\n  </ul>\n</div>");
    }
    if (!search_term && !uri_filter && !date_filter && !datetime_filter && !numeric_filter && !not_empty_filter) {
      th.find('.title ul').prepend("<li class=\"not_empty_filter\">\n  <a href=\"#\" class=\"add_not_empty_filter\">\n    <span class=\"glyphicon glyphicon-filter\"></span> Hide empty results\n  </a>\n</li>");
    }
    $.when(add_cells_to_results_table($('body').data('subjects'), predicate)).done(function(data) {
      debug(data);
      return deferred.resolve("Added column for " + predicate['uri']);
    });
    return deferred.promise();
  };

  add_columns = function() {
    var deferred;
    deferred = $.Deferred();
    if ($('body').data('predicates').length > 0) {
      $.when(add_columns_based_on_data_structure()).done(function(data) {
        debug(data);
        return deferred.resolve('Added all columns');
      });
    } else if (are_we_in_dataset_mode()) {
      $.when(add_columns_based_on_dimensions_and_measures()).done(function(data) {
        debug(data);
        return deferred.resolve('Added all columns');
      });
    } else {
      deferred.resolve('ERROR: This should never happen.');
    }
    return deferred.promise();
  };

  add_columns_based_on_data_structure = function() {
    var added_columns_counter, deferred, predicate, _i, _len, _ref;
    deferred = $.Deferred();
    added_columns_counter = 0;
    _ref = $('body').data('predicates');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      predicate = _ref[_i];
      $.when(add_column_for_given_predicate(predicate)).done(function(data) {
        debug(data);
        added_columns_counter += 1;
        if (added_columns_counter === $('body').data('predicates').length) {
          return deferred.resolve('Added all columns based on data structure');
        }
      });
    }
    return deferred.promise();
  };

  add_columns_based_on_dimensions_and_measures = function() {
    var deferred;
    deferred = $.Deferred();
    $.when(add_columns_for_all_dimensions(), add_columns_for_all_measures()).done(function(dimension_data, measure_data) {
      debug(dimension_data);
      debug(measure_data);
      $.address.history(false);
      update_the_address();
      $.address.history(true);
      if (Object.keys($('body').data('dimensions')).length === 0 && Object.keys($('body').data('measures')).length === 0) {
        debug('No dimensions or measures found!');
        ui_display_results_page_alert("It looks as if this dataset has\n<strong>no defined dimensions or measures!</strong>");
      } else if (Object.keys($('body').data('dimensions')).length === 0) {
        debug('No dimensions found!');
        ui_display_results_page_alert("It looks as if this dataset has\n<strong>no defined dimensions!</strong>");
      } else if (Object.keys($('body').data('measures')).length === 0) {
        debug('No measures found!');
        ui_display_results_page_alert("It looks as if this dataset has\n<strong>no defined measures!</strong>");
      }
      return deferred.resolve('Added columns for dimensions and measures');
    });
    return deferred.promise();
  };

  add_columns_for_all_dimensions = function() {
    var added_columns_counter, deferred, dimension, dimension_list, dimension_uri, _i, _len, _ref;
    deferred = $.Deferred();
    if (Object.keys($('body').data('dimensions')).length === 0) {
      deferred.resolve("There are no dimensions to add");
    } else {
      added_columns_counter = 0;
      dimension_list = [];
      _ref = $('body').data('dimensions');
      for (dimension_uri in _ref) {
        dimension = _ref[dimension_uri];
        dimension_list.push({
          uri: dimension_uri,
          label: dimension['label']
        });
      }
      dimension_list = dimension_list.sort(function(a, b) {
        if (a.label.toLowerCase() > b.label.toLowerCase()) {
          return 1;
        }
        if (a.label.toLowerCase() < b.label.toLowerCase()) {
          return -1;
        }
        return 0;
      });
      for (_i = 0, _len = dimension_list.length; _i < _len; _i++) {
        dimension = dimension_list[_i];
        $.when(add_column_for_given_predicate(dimension)).done(function(data) {
          debug(data);
          added_columns_counter += 1;
          if (added_columns_counter === Object.keys($('body').data('dimensions')).length) {
            return deferred.resolve("Added " + added_columns_counter + " dimension columns");
          }
        });
      }
    }
    return deferred.promise();
  };

  add_columns_for_all_measures = function() {
    var added_columns_counter, deferred, measure, measure_list, measure_uri, _i, _len, _ref;
    deferred = $.Deferred();
    if (Object.keys($('body').data('measures')).length === 0) {
      deferred.resolve("There are no measures to add");
    } else {
      added_columns_counter = 0;
      measure_list = [];
      _ref = $('body').data('measures');
      for (measure_uri in _ref) {
        measure = _ref[measure_uri];
        measure_list.push({
          uri: measure_uri,
          label: measure['label']
        });
      }
      measure_list = measure_list.sort(function(a, b) {
        if (a.label.toLowerCase() > b.label.toLowerCase()) {
          return 1;
        }
        if (a.label.toLowerCase() < b.label.toLowerCase()) {
          return -1;
        }
        return 0;
      });
      for (_i = 0, _len = measure_list.length; _i < _len; _i++) {
        measure = measure_list[_i];
        $.when(add_column_for_given_predicate(measure)).done(function(data) {
          debug(data);
          added_columns_counter += 1;
          if (added_columns_counter === Object.keys($('body').data('measures')).length) {
            return deferred.resolve("Added " + added_columns_counter + " measure columns");
          }
        });
      }
    }
    return deferred.promise();
  };

  are_we_in_dataset_mode = function() {
    if ($('body').data('dataset')) {
      return true;
    } else {
      return false;
    }
  };

  clear_results = function() {
    $('body').data('subjects', []);
    $("#results tr:not(:first)").remove();
    $('div#load_more').html('');
    $('#results_count').hide();
    $('body').data('total_results_count', 0);
    return $('ul#available_predicates').empty();
  };

  count_filters = function() {
    var candidate, count, _i, _len, _ref;
    count = 0;
    _ref = $('body').data('predicates');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      candidate = _ref[_i];
      if (candidate['filter_type']) {
        count += 1;
      }
    }
    return count;
  };

  debug = function(data) {
    if ($('body').data('DEBUG')) {
      return console.log(data);
    }
  };

  get_additional_subjects = function(load_size) {
    var deferred;
    deferred = $.Deferred();
    ui_display_spinner();
    $('#add_column').hide();
    $.when(get_batch_of_additional_subjects()).done(function(data) {
      debug(data);
      ui_clear_spinner();
      if (load_size > 10) {
        return get_additional_subjects(load_size - $('body').data('BATCH_SIZE'));
      } else {
        ui_update_the_load_more_results_area(load_size);
        $('#navbar_container').show();
        $('#add_column').css('display', 'inline-block');
        $('#results_count').show();
        return deferred.resolve("Finished getting additional subjects");
      }
    });
    return deferred.promise();
  };

  get_and_add_predicates_used_by_subjects = function(subjects) {
    var deferred;
    deferred = $.Deferred();
    $.ajax({
      url: '/query/get_predicates_used_by_subjects',
      type: 'POST',
      data: JSON.stringify({
        endpoint_url: $('body').data('endpoint'),
        search_type: $('body').data('search_type'),
        subjects: subjects
      })
    }).done(function(predicates_data) {
      var item, label_suffix, listitems, predicate, _i, _j, _len, _len1, _ref;
      log_sparql_query_runtime(predicates_data['runtime'], 'for getting the available predicates', predicates_data['query']);
      _ref = predicates_data.predicates;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        predicate = _ref[_i];
        if ($("#available_predicates a[data-uri=\"" + predicate.uri + "\"][data-inverse=\"" + predicate.inverse + "\"]").length === 0 && !is_predicate_already_displayed(predicate)) {
          debug(("Added '" + predicate.label + "' (" + predicate.uri + ")") + " to the list of available predicates");
          label_suffix = '';
          if (predicate.uri.indexOf('http://dbpedia.org/property/') >= 0) {
            label_suffix = ' (old)';
          }
          $('#available_predicates').append("<li>\n  <a\n    class=\"add_predicate\"\n    data-label=\"" + predicate.label + label_suffix + "\"\n    data-uri=\"" + predicate.uri + "\"\n    data-inverse=\"" + predicate.inverse + "\"\n    title=\"" + predicate.uri + "\"\n    href=\"#\">" + predicate.label + label_suffix + "</a>\n</li>");
        }
      }
      listitems = $('#available_predicates').children('li').get().sort(function(a, b) {
        return $(a).text().toUpperCase().localeCompare($(b).text().toUpperCase());
      });
      for (_j = 0, _len1 = listitems.length; _j < _len1; _j++) {
        item = listitems[_j];
        $('#available_predicates').append(item);
      }
      return deferred.resolve("Processed " + listitems.length + " predicates");
    });
    return deferred.promise();
  };

  get_and_display_the_dataset_label = function() {
    var deferred;
    deferred = $.Deferred();
    if (!are_we_in_dataset_mode()) {
      deferred.resolve("We're not in dataset mode, nothing to do here");
    } else {
      $.ajax({
        url: '/query/get_dataset_label',
        type: 'POST',
        data: JSON.stringify({
          dataset_uri: $('body').data('dataset'),
          endpoint_url: $('body').data('endpoint'),
          search_type: $('body').data('search_type')
        })
      }).done(function(data) {
        var description;
        description = data['dataset']['description'];
        if (!description) {
          description = 'No description available';
        }
        $('#dataset_title .panel-body').html("<strong><span id='dataset_label'>\n  " + data['dataset']['label'] + "\n</span></strong><br />\n<span id='dataset_description'>" + description + "</span><br />\n(Source: <a href=\"" + data['endpoint']['website_url'] + "\"\ntarget=\"_blank\">" + data['endpoint']['label'] + "</a>)");
        $('#dataset_title').show();
        return deferred.resolve("Displayed the dataset label");
      });
    }
    return deferred.promise();
  };

  get_and_display_the_datasets_of_the_selected_endpoint = function() {
    var ep;
    ep = $('body').data('endpoint');
    $("#dataset_endpoint_selector>option[value='" + ep + "']").prop('selected', true);
    if (__indexOf.call($.address.parameterNames(), 'endpoint') >= 0) {
      $("#ep>option[value='" + ep + "']").prop('selected', true);
    }
    $('#dataset_list').empty();
    $('#endpoint_title').html('Loading datasets, please wait …');
    $('#endpoint_datasets_count').html('0 datasets');
    $('#endpoint_description').html('');
    Spinners.create('#endpoint_description', {
      radius: 5,
      dashes: 12,
      width: 2,
      height: 5,
      opacity: 1,
      padding: 0,
      rotation: 600,
      color: '#000000'
    }).play();
    return $.ajax({
      url: '/query/get_datasets',
      type: 'POST',
      data: JSON.stringify({
        endpoint_url: $('body').data('endpoint'),
        search_type: $('body').data('search_type')
      })
    }).done(function(data) {
      var dataset, datasetUri, dataset_li, dataset_size, url, _i, _len, _ref;
      $('#endpoint_title').html(data.endpoint.label);
      $('#endpoint_description').html('More info at <a href="' + data.endpoint.website_url + '" target="_blank">' + data.endpoint.website_url + '</a>');
      $('#endpoint_datasets_count').html(data.datasets.length + ' datasets');
      _ref = data.datasets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dataset = _ref[_i];
        dataset_size = '';
        if (dataset.size > 0) {
          dataset_size = " (" + dataset.size + " entries)";
        }
        datasetUri = encodeURIComponent(dataset.uri);
        url = "#?dataset=" + datasetUri + "&amp;";
        url += "endpoint=" + (encodeURIComponent($('body').data('endpoint')));
        dataset_li = "<li class=\"list-group-item\">\n  <input type=\"checkbox\" title=\"Compare in Vis Wizard\" class=\"compare\" data-dataset=\"" + datasetUri + "\" />\n  <span class=\"pull-right\" style=\"padding:0 0 10px 10px;\">\n    <a href=\"/vis" + url + "\">\n      <img src=\"/static/img/cubevis.png\"\n      title=\"Visualize the data\" class=\"cubevis\"\n      onmouseover=\"$(this).tooltip('show')\">\n    </a>\n  </span>\n  <a href=\"/search" + url + "\"\n  title=\"Display the data" + dataset_size + "\"\n  onmouseover=\"$(this).tooltip('show')\">" + dataset.label + "</a>\n</li>";
        $('#dataset_list').append(dataset_li);
      }
      return Spinners.removeDetached();
    });
  };

  get_and_save_cube_dimensions_and_measures = function() {
    var deferred;
    deferred = $.Deferred();
    if (!are_we_in_dataset_mode()) {
      deferred.resolve("We're not in dataset mode");
    } else {
      $.ajax({
        url: '/query/get_cube_dimensions_and_measures',
        type: 'POST',
        data: JSON.stringify({
          endpoint_url: $('body').data('endpoint'),
          search_type: $('body').data('search_type'),
          dataset: $('body').data('dataset')
        })
      }).done(function(data) {
        var dimension, dimensions, measure, measures, _i, _j, _len, _len1, _ref, _ref1;
        if (data['dimensions'].length < 2) {
          $('#menu_aggregate_dataset').hide();
        } else {
          $('#menu_aggregate_dataset').show();
        }
        dimensions = {};
        _ref = data['dimensions'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dimension = _ref[_i];
          dimensions[dimension['uri']] = {
            'label': dimension['label']
          };
        }
        $('body').data('dimensions', dimensions);
        measures = {};
        _ref1 = data['measures'];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          measure = _ref1[_j];
          measures[measure['uri']] = {
            'label': measure['label']
          };
        }
        $('body').data('measures', measures);
        return deferred.resolve(("Received " + data['dimensions'].length + " dimension(s) and ") + ("" + data['measures'].length + " measure(s)"));
      });
    }
    return deferred.promise();
  };

  get_batch_of_additional_subjects = function() {
    var deferred;
    deferred = $.Deferred();
    $.when(get_the_subjects()).done(function(subjects_data) {
      var subject, _i, _len, _ref;
      log_sparql_query_runtime(subjects_data['runtime'], 'for getting the subjects', subjects_data['query']);
      if (subjects_data.subjects.length === 0) {
        ui_clear_spinner();
        $('div#load_more').html('');
        deferred.resolve('We are done! =)');
        return;
      }
      ui_clear_spinner();
      _ref = subjects_data.subjects;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subject = _ref[_i];
        $('body').data('subjects').push(subject);
      }
      return $.when(get_and_add_predicates_used_by_subjects(subjects_data.subjects)).done(function(data) {
        var get_objects_counter, predicate, _j, _k, _len1, _len2, _ref1, _ref2, _results;
        debug(data);
        _ref1 = subjects_data.subjects;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          subject = _ref1[_j];
          $('#results').append("<tr data-s=\"" + subject + "\"></tr>");
        }
        ui_update_the_results_count();
        get_objects_counter = 0;
        _ref2 = $('body').data('predicates');
        _results = [];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          predicate = _ref2[_k];
          _results.push($.when(add_cells_to_results_table(subjects_data.subjects, {
            'uri': predicate['uri'],
            'inverse': predicate['inverse']
          })).done(function(data) {
            debug(data);
            get_objects_counter += 1;
            if (get_objects_counter === $('body').data('predicates').length) {
              return deferred.resolve('We are done! =)');
            }
          }));
        }
        return _results;
      });
    });
    return deferred.promise();
  };

  get_search_filter_for_predicate = function(predicate) {
    var candidate, _i, _len, _ref;
    _ref = $('body').data('predicates');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      candidate = _ref[_i];
      if (candidate['uri'] === predicate['uri'] && candidate['filter_type'] === 'search') {
        return candidate['filter_value'];
      }
    }
    return false;
  };

  get_the_objects = function(subjects, predicate) {
    return $.ajaxQueue({
      url: '/query/get_objects_for_predicate',
      type: 'POST',
      data: JSON.stringify({
        endpoint_url: $('body').data('endpoint'),
        search_type: $('body').data('search_type'),
        subjects: subjects,
        predicate: predicate
      })
    });
  };

  get_the_subjects = function() {
    return $.ajaxQueue({
      url: '/query/get_subjects',
      type: 'POST',
      data: JSON.stringify({
        endpoint_url: $('body').data('endpoint'),
        search_type: $('body').data('search_type'),
        predicates: $('body').data('predicates'),
        offset: $('body').data('subjects').length,
        dataset: $('body').data('dataset')
      })
    });
  };

  get_not_empty_filter_for_predicate = function(predicate) {
    var candidate, _i, _len, _ref;
    _ref = $('body').data('predicates');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      candidate = _ref[_i];
      if (candidate['uri'] === predicate['uri'] && candidate['inverse'] === predicate['inverse'] && candidate['filter_type'] === 'not_empty') {
        return true;
      }
    }
    return false;
  };

  get_date_filter_for_predicate = function(predicate) {
    var candidate, max, min, response, _i, _len, _ref;
    _ref = $('body').data('predicates');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      candidate = _ref[_i];
      if (candidate['uri'] === predicate['uri'] && candidate['inverse'] === predicate['inverse'] && candidate['filter_type'] === 'date') {
        min = candidate['filter_value'].split(',')[0];
        max = candidate['filter_value'].split(',')[1];
        response = {};
        response['value'] = candidate['filter_value'];
        if (min && max) {
          response['label'] = "" + min + "–" + max;
        } else if (min) {
          response['label'] = "&ge; " + min;
        } else if (max) {
          response['label'] = "&le; " + max;
        }
        return response;
      }
    }
    return false;
  };

  get_datetime_filter_for_predicate = function(predicate) {
    var candidate, max, min, response, _i, _len, _ref;
    _ref = $('body').data('predicates');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      candidate = _ref[_i];
      if (candidate['uri'] === predicate['uri'] && candidate['inverse'] === predicate['inverse'] && candidate['filter_type'] === 'datetime') {
        min = candidate['filter_value'].split(',')[0];
        max = candidate['filter_value'].split(',')[1];
        response = {};
        response['value'] = candidate['filter_value'];
        if (min && max) {
          response['label'] = "" + min + "–" + max;
        } else if (min) {
          response['label'] = "&ge; " + min;
        } else if (max) {
          response['label'] = "&le; " + max;
        }
        return response;
      }
    }
    return false;
  };

  get_numeric_filter_for_predicate = function(predicate) {
    var candidate, max, min, response, _i, _len, _ref;
    _ref = $('body').data('predicates');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      candidate = _ref[_i];
      if (candidate['uri'] === predicate['uri'] && candidate['inverse'] === predicate['inverse'] && candidate['filter_type'] === 'numeric') {
        min = candidate['filter_value'].split(',')[0];
        max = candidate['filter_value'].split(',')[1];
        response = {};
        response['value'] = candidate['filter_value'];
        if (min && max) {
          response['label'] = "" + min + "–" + max;
        } else if (min) {
          response['label'] = "&ge; " + min;
        } else if (max) {
          response['label'] = "&le; " + max;
        }
        return response;
      }
    }
    return false;
  };

  get_uri_filter_for_predicate = function(predicate) {
    var candidate, response, _i, _len, _ref;
    _ref = $('body').data('predicates');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      candidate = _ref[_i];
      if (candidate['uri'] === predicate['uri'] && candidate['inverse'] === predicate['inverse'] && candidate['filter_type'] === 'uri') {
        response = {};
        response['value'] = candidate['filter_value'];
        if (candidate['filter_label']) {
          response['label'] = candidate['filter_label'];
        }
        return response;
      }
    }
    return false;
  };

  guess_and_set_column_types = function(data) {
    var datatype, multivalue_column_detector, object, p_index, td, th, _i, _len, _ref;
    th = $("th[data-uri=\"" + data['predicate']['uri'] + "\"][data-inverse=\"" + data['predicate']['inverse'] + "\"]");
    td = $("td[data-p=\"" + data['predicate']['uri'] + "\"][data-inverse=\"" + data['predicate']['inverse'] + "\"]");
    datatype = data['objects'][0]['o']['datatype'];
    p_index = th.prevAll("th").length;
    if (!$('body').data('predicates')[p_index]) {
      debug('ERROR: Trying to find the predicate in the table. Failing.');
      return;
    }
    multivalue_column_detector = {};
    _ref = data['objects'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      object = _ref[_i];
      if (!multivalue_column_detector[object['s']]) {
        multivalue_column_detector[object['s']] = 1;
      } else {
        if (!are_we_in_dataset_mode()) {
          $('body').data('predicates')[p_index]['cube_component_type'] = 'multivalue';
          break;
        }
      }
    }
    if ($('body').data('predicates')[p_index]['cube_component_type'] === 'multivalue') {
      th.find("li.column_type").remove();
      th.find("ul").first().append("<li style=\"font-weight: normal;\" class=\"column_type\">\n  <a class=\"cube_info guessed_multivalue\" href=\"#\">\n    <span class=\"glyphicon glyphicon-info-sign\"></span>\n    This is probably a multi-value column.\n  </a>\n</li>");
      if (!are_we_in_dataset_mode()) {
        th.attr('data-component', 'multivalue');
        return td.attr('data-component', 'multivalue').addClass('multivalue').removeClass('dimension').removeClass('measure');
      }
    } else if (data['predicate']['uri'] === 'http://data.lod2.eu/scoreboard/properties/value') {
      if (!are_we_in_dataset_mode()) {
        $('body').data('predicates')[p_index]['cube_component_type'] = 'measure';
      }
      if (datatype === 'http://www.w3.org/2001/XMLSchema#integer' || datatype === 'http://www.w3.org/2001/XMLSchema#decimal' || datatype === 'http://www.w3.org/2001/XMLSchema#float' || datatype === 'http://www.w3.org/2001/XMLSchema#double' || datatype === 'http://www.w3.org/2001/XMLSchema#nonPositiveInteger' || datatype === 'http://www.w3.org/2001/XMLSchema#negativeInteger' || datatype === 'http://www.w3.org/2001/XMLSchema#long' || datatype === 'http://www.w3.org/2001/XMLSchema#int' || datatype === 'http://www.w3.org/2001/XMLSchema#short' || datatype === 'http://www.w3.org/2001/XMLSchema#byte' || datatype === 'http://www.w3.org/2001/XMLSchema#nonNegativeInteger' || datatype === 'http://www.w3.org/2001/XMLSchema#unsignedLong' || datatype === 'http://www.w3.org/2001/XMLSchema#unsignedInt' || datatype === 'http://www.w3.org/2001/XMLSchema#unsignedShort' || datatype === 'http://www.w3.org/2001/XMLSchema#unsignedByte' || datatype === 'http://www.w3.org/2001/XMLSchema#positiveInteger') {
        th.find(".numeric_filter").remove();
        th.find("ul").first().prepend("<li class=\"numeric_filter\">\n  <a href=\"#\" class=\"add_numeric_filter\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    Add filter &hellip;\n  </a>\n</li>");
        if ($('body').data('predicates')[p_index]['filter_type'] === 'numeric') {
          th.find('.numeric_filter').hide();
        }
      } else {
        debug("Didn't add a filter, datatype was " + data['objects'][0]['o']['datatype']);
      }
      th.find(".column_type").remove();
      th.find("ul").first().append("<li class=\"column_type measure\" style=\"font-weight: normal;\">\n  <a class=\"cube_info guessed_measure\" href=\"#\">\n    <span class=\"glyphicon glyphicon-info-sign\"></span>\n    This is probably a cube measure.\n  </a>\n</li>");
      if (!are_we_in_dataset_mode()) {
        th.attr('data-component', 'observation');
        return td.attr('data-component', 'observation').attr('data-range', 'http://code-research.eu/resource#CubeObservationNumber').addClass('measure').removeClass('dimension');
      }
    } else if (data['objects'][0]['o']['type'] !== 'typed-literal' || datatype === 'http://www.w3.org/2001/XMLSchema#date' || datatype === 'http://www.w3.org/2001/XMLSchema#dateTime') {
      if (!are_we_in_dataset_mode()) {
        $('body').data('predicates')[p_index]['cube_component_type'] = 'dimension';
      }
      th.find("li.column_type").remove();
      th.find("ul").first().append("<li class=\"column_type dimension\" style=\"font-weight: normal;\">\n  <a class=\"cube_info guessed_dimension\" href=\"#\">\n    <span class=\"glyphicon glyphicon-info-sign\"></span>\n    This is probably a cube dimension.\n  </a>\n</li>");
      if (!are_we_in_dataset_mode()) {
        th.attr('data-component', 'dimension');
        td.attr('data-component', 'dimension').attr('data-range', 'http://code-research.eu/resource#CubeDimensionNominal').addClass('dimension').removeClass('measure');
      }
      if (data['objects'][0]['o']['type'] === 'literal') {
        th.find(".search_filter").remove();
        th.find("ul").first().prepend("<li class=\"search_filter\">\n  <a href=\"#\" class=\"add_search_filter\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    Add filter &hellip;\n  </a>\n</li>");
        if ($('body').data('predicates')[p_index]['filter_type'] === 'search') {
          th.find('.search_filter').hide();
        }
      }
      if (datatype === 'http://www.w3.org/2001/XMLSchema#date') {
        th.find(".date_filter").remove();
        th.find("ul").first().prepend("<li class=\"date_filter\">\n  <a href=\"#\" class=\"add_date_filter\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    Add filter &hellip;\n  </a>\n</li>");
        if ($('body').data('predicates')[p_index]['filter_type'] === 'date') {
          th.find('.date_filter').hide();
        }
      }
      if (datatype === 'http://www.w3.org/2001/XMLSchema#dateTime') {
        th.find(".datetime_filter").remove();
        th.find("ul").first().prepend("<li class=\"datetime_filter\">\n  <a href=\"#\" class=\"add_datetime_filter\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    Add filter &hellip;\n  </a>\n</li>");
        if ($('body').data('predicates')[p_index]['filter_type'] === 'datetime') {
          return th.find('.datetime_filter').hide();
        }
      }
    } else {
      if (!are_we_in_dataset_mode()) {
        $('body').data('predicates')[p_index]['cube_component_type'] = 'measure';
      }
      if (datatype === 'http://www.w3.org/2001/XMLSchema#integer' || datatype === 'http://www.w3.org/2001/XMLSchema#decimal' || datatype === 'http://www.w3.org/2001/XMLSchema#float' || datatype === 'http://www.w3.org/2001/XMLSchema#double' || datatype === 'http://www.w3.org/2001/XMLSchema#nonPositiveInteger' || datatype === 'http://www.w3.org/2001/XMLSchema#negativeInteger' || datatype === 'http://www.w3.org/2001/XMLSchema#long' || datatype === 'http://www.w3.org/2001/XMLSchema#int' || datatype === 'http://www.w3.org/2001/XMLSchema#short' || datatype === 'http://www.w3.org/2001/XMLSchema#byte' || datatype === 'http://www.w3.org/2001/XMLSchema#nonNegativeInteger' || datatype === 'http://www.w3.org/2001/XMLSchema#unsignedLong' || datatype === 'http://www.w3.org/2001/XMLSchema#unsignedInt' || datatype === 'http://www.w3.org/2001/XMLSchema#unsignedShort' || datatype === 'http://www.w3.org/2001/XMLSchema#unsignedByte' || datatype === 'http://www.w3.org/2001/XMLSchema#positiveInteger') {
        th.find(".numeric_filter").remove();
        th.find("ul").first().prepend("<li class=\"numeric_filter\">\n  <a href=\"#\" class=\"add_numeric_filter\">\n    <span class=\"glyphicon glyphicon-filter\"></span>\n    Add filter &hellip;\n  </a>\n</li>");
        if ($('body').data('predicates')[p_index]['filter_type'] === 'numeric') {
          th.find('.numeric_filter').hide();
        }
      } else {
        debug("Didn't add a filter, datatype was " + data['objects'][0]['o']['datatype']);
      }
      th.find(".column_type").remove();
      th.find("ul").first().append("<li class=\"column_type measure\" style=\"font-weight: normal;\">\n  <a class=\"cube_info guessed_measure\" href=\"#\">\n    <span class=\"glyphicon glyphicon-info-sign\"></span>\n    This is probably a cube measure.\n  </a>\n</li>");
      if (!are_we_in_dataset_mode()) {
        th.attr('data-component', 'observation');
        return td.attr('data-component', 'observation').attr('data-range', 'http://code-research.eu/resource#CubeObservationNumber').addClass('measure').removeClass('dimension');
      }
    }
  };

  initial_search = function() {
    var deferred, get_subjects_request, slow_endpoint_alert;
    deferred = $.Deferred();
    ui_display_the_results_page();
    ui_display_spinner();
    $('#sparql_log').empty();
    get_subjects_request = get_the_subjects();
    slow_endpoint_alert = function() {
      if (get_subjects_request.state() === 'pending') {
        return ui_display_results_page_alert("The SPARQL endpoint <em>" + ($('body').data('endpoint')) + "</em> is taking a\nlong time to respond. Sorry about that!<br/>\nIf you'd like, you can take a look at the\n<a data-toggle=\"modal\" href=\"#sparql_runtime_modal\">SPARQL Query Log</a>");
      }
    };
    window.setTimeout(slow_endpoint_alert, 3000);
    $.when(get_subjects_request, get_and_save_cube_dimensions_and_measures()).done(function(subjects_data, dimensions_and_measures_data) {
      var subject, _i, _len, _ref;
      subjects_data = subjects_data[0];
      debug(dimensions_and_measures_data);
      log_sparql_query_runtime(subjects_data['runtime'], 'for getting the subjects', subjects_data['query']);
      $('body').data('endpoint', subjects_data['endpoint_url']);
      if (subjects_data.subjects.length === 0) {
        ui_clear_spinner();
        ui_display_the_front_page();
        ui_display_front_page_alert("<strong>Nothing found!</strong>\nPlease try again with another search.");
        return;
      }
      _ref = subjects_data.subjects;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subject = _ref[_i];
        $('body').data('subjects').push(subject);
      }
      return $.when(get_and_add_predicates_used_by_subjects(subjects_data.subjects), get_and_display_the_dataset_label()).done(function(predicates_data, dataset_data) {
        debug(predicates_data);
        debug(dataset_data);
        ui_clear_spinner();
        $.when(ui_get_and_display_the_total_results_count()).done(function(data) {
          debug(data);
          return ui_update_the_load_more_results_area(subjects_data.subjects.length);
        });
        ui_update_the_results_count();
        $('#navbar_container').show();
        $('#add_column').css('display', 'inline-block');
        return $.when(add_columns()).done(function(data) {
          debug(data);
          update_the_address();
          return deferred.resolve('We are done! =)');
        });
      });
    });
    return deferred.promise();
  };

  is_predicate_already_displayed = function(predicate) {
    var displayed;
    displayed = false;
    $('#results th').each(function() {
      if ($(this).attr('data-uri') === predicate.uri && ($(this).attr('data-inverse') === 'true') === predicate.inverse) {
        return displayed = true;
      }
    });
    return displayed;
  };

  is_predicate_already_in_data_structure = function(predicate) {
    var candidate, _i, _len, _ref;
    _ref = $('body').data('predicates');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      candidate = _ref[_i];
      if (candidate['uri'] === predicate['uri'] && candidate['inverse'] === predicate['inverse']) {
        return true;
      }
    }
    return false;
  };

  prepare_data_and_add_to_cells = function(data) {
    var filter_value, filter_value_split, focus_filter_label, focus_url, regex, row, split_number, value, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;
    _ref = data.objects;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      row = _ref[_i];
      if (row.o.uri && row.o.label) {
        focus_filter_label = $("td[data-s=\"" + row.s + "\"]").first().text().trim();
        focus_url = "/search#?p0=http%3A%2F%2Fwww.w3.org%2F2000%2F01%2Frdf-schema%23label&p0i=false&p0ft=search&p0fv=" + (encodeURIComponent(row.o.label).toLowerCase());
        focus_url += "&p1=http%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23type&p1i=false";
        focus_url += "&p2=" + (encodeURIComponent(data.predicate['uri'])) + "&p2i=" + (!data.predicate['inverse']) + "&p2ft=uri&p2fv=" + row.s + "&p2fl=" + (encodeURIComponent(focus_filter_label));
        focus_url += "&endpoint=" + ($('body').data('endpoint')) + "&searchtype=" + ($('body').data('search_type'));
        row.o.html = "<div class=\"dropdown\">\n  <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n  data-toggle=\"dropdown\" data-uri=\"" + row.o.uri + "\">\n    " + row.o.label + " <span class=\"caret\"></span>\n  </button>\n  <ul class=\"dropdown-menu\">\n    <li>\n      <a href=\"#\" class=\"add_uri_filter\">\n        <span class=\"glyphicon glyphicon-filter\"></span>\n        Use <em>" + row.o.label + "</em> as filter\n      </a>\n    </li>\n    <li>\n      <a href=\"" + focus_url + "\" target=\"_blank\">\n        <span class=\"glyphicon glyphicon-record\"></span>\n        Focus on <em>" + row.o.label + "</em> (experimental)\n      </a>\n    </li>\n    <li>\n      <a href=\"" + row.o.uri + "\" target=\"_blank\">\n        <span class=\"glyphicon glyphicon-globe\"></span>\n        Open in Browser\n      </a>\n    </li>\n  </ul>\n</div>";
      }
      if (!row.o.uri && __indexOf.call(row.o.label, '.') >= 0 && __indexOf.call(row.o.label.toLowerCase(), 'e') >= 0) {
        row.o.html = parseFloat(row.o.label);
      }
      if (!row.o.html) {
        row.o.html = "<p>" + row.o.label + "</p>";
      }
      if (get_search_filter_for_predicate(data.predicate)) {
        filter_value = get_search_filter_for_predicate(data.predicate);
        filter_value_split = filter_value.split(' ');
        for (_j = 0, _len1 = filter_value_split.length; _j < _len1; _j++) {
          value = filter_value_split[_j];
          regex = new RegExp(value, "ig");
          row.o.html = row.o.html.replace(regex, '<strong>$&</strong>');
        }
      }
      if (!isNaN(parseFloat(row.o.html)) && isFinite(row.o.html)) {
        split_number = row.o.html.toString().split('.');
        row.o.html = split_number[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        if (split_number[1] != null) {
          row.o.html = row.o.html + '.' + split_number[1];
        }
      }
    }
    data.objects = data.objects.sort(function(a, b) {
      if (a.o.label > b.o.label) {
        return 1;
      }
      if (a.o.label < b.o.label) {
        return -1;
      }
      return 0;
    });
    _ref1 = data.objects;
    _results = [];
    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
      row = _ref1[_k];
      _results.push($("td[data-s=\"" + row.s + "\"][data-p=\"" + data.predicate['uri'] + "\"][data-inverse=\"" + data.predicate['inverse'] + "\"]").append("" + row.o.html + "\n"));
    }
    return _results;
  };

  set_cube_column_types = function(data) {
    var predicate_index;
    predicate_index = $("th[data-uri=\"" + data.predicate['uri'] + "\"]").prevAll("th").length;
    if (!$('body').data('predicates')[predicate_index]) {
      debug('ERROR: Trying to find the predicate in the table. Failing.');
      return;
    }
    if (data.predicate['uri'] in $('body').data('dimensions')) {
      $('body').data('predicates')[predicate_index]['cube_component_type'] = 'dimension';
      if ($("#results tr:first th[data-uri=\"" + data.predicate['uri'] + "\"] ul .defined_dimension").length === 0) {
        $("#results tr:first th[data-uri=\"" + data.predicate['uri'] + "\"] ul").append("<li class=\"dimension\" style=\"font-weight: normal;\">\n  <a class=\"cube_info defined_dimension\" href=\"#\">\n    <span class=\"glyphicon glyphicon-info-sign\"></span>\n    This is by definition a cube dimension.\n  </a>\n</li>");
        $("#results tr:first th[data-uri=\"" + data.predicate['uri'] + "\"] ul").prepend("<li style=\"font-weight: normal;\">\n  <a class=\"group_by_column\" href=\"#\">\n    <span class=\"glyphicon glyphicon-th-list\"></span> Group by\n    " + ($('body').data('dimensions')[data.predicate['uri']]['label']) + "\n  </a>\n</li>");
      }
      $("th[data-uri='" + data.predicate['uri'] + "']").attr('data-component', 'dimension');
      return $("td[data-p='" + data.predicate['uri'] + "']").attr('data-component', 'dimension').attr('data-range', 'http://code-research.eu/resource#CubeDimensionNominal').addClass('dimension').removeClass('measure');
    } else if (data.predicate['uri'] in $('body').data('measures')) {
      $('body').data('predicates')[predicate_index]['cube_component_type'] = 'measure';
      if ($("#results tr:first th[data-uri=\"" + data.predicate['uri'] + "\"] ul .defined_measure").length === 0) {
        $("#results tr:first th[data-uri=\"" + data.predicate['uri'] + "\"] ul").append("<li class=\"measure\" style=\"font-weight: normal;\">\n  <a class=\"cube_info defined_measure\" href=\"#\">\n    <span class=\"glyphicon glyphicon-info-sign\"></span>\n    This is by definition a cube measure.\n  </a>\n</li>");
      }
      $("th[data-uri='" + data.predicate['uri'] + "']").attr('data-component', 'observation');
      return $("td[data-p=\"" + data.predicate['uri'] + "\"]").attr('data-component', 'observation').attr('data-range', 'http://code-research.eu/resource#CubeObservationNumber').addClass('measure').removeClass('dimension');
    }
  };

  shorten_uri = function(uri) {
    var short_uri, split;
    if (__indexOf.call(uri, "#") >= 0) {
      split = uri.split("#");
      short_uri = split[split.length - 1];
    } else if (__indexOf.call(uri, "/") >= 0) {
      split = uri.split("/");
      short_uri = split[split.length - 1];
    }
    short_uri = short_uri.charAt(0).toUpperCase() + short_uri.substring(1);
    return short_uri;
  };

  update_the_address = function() {
    var index, predicate, _i, _len, _ref;
    $.address.value('');
    if (are_we_in_dataset_mode()) {
      $.address.parameter("dataset", encodeURIComponent($('body').data('dataset')));
    }
    _ref = $('body').data('predicates');
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      predicate = _ref[index];
      $.address.parameter("p" + index, encodeURIComponent(predicate['uri']));
      if (predicate['inverse']) {
        $.address.parameter("p" + index + "i", predicate['inverse']);
      } else {
        $.address.parameter("p" + index + "i", false);
      }
      if (predicate['filter_type'] && predicate['filter_value']) {
        $.address.parameter("p" + index + "ft", predicate['filter_type']);
        $.address.parameter("p" + index + "fv", encodeURIComponent(predicate['filter_value']));
        if (predicate['filter_label']) {
          $.address.parameter("p" + index + "fl", encodeURIComponent(predicate['filter_label']));
        }
      }
    }
    if ($('body').data('endpoint') !== 'code') {
      $.address.parameter("endpoint", encodeURIComponent($('body').data('endpoint')));
    }
    if ($('body').data('search_type') !== 'regex') {
      $.address.parameter('searchtype', $('body').data('search_type'));
    }
    return $.address.update();
  };

  log_sparql_query_runtime = function(runtime, text, query) {
    return $('#sparql_log').prepend("<div>\n  <p>\n    <a class=\"sparql_toggle\" href=\"#\" style=\"color: rgba(51,51,51,1);\">\n      <span class=\"arrow\" style=\"color: #666;\">\n        <span class=\"glyphicon glyphicon-chevron-right\"></span>\n      </span>\n      " + ((new Date).toTimeString().substr(0, 8)) + " –\n      " + (runtime.toFixed(2)) + "s " + text + "\n    </a>\n  </p>\n  <textarea readonly=\"readonly\" style=\"display: none; width: 100%;\n  height: 200px; margin: 5px 0 10px 0;\">" + (htmlEncode(query)) + "</textarea>\n</div>");
  };

  htmlEncode = function(value) {
    return $('<div/>').text(value).html();
  };


  /*
  Helper Functions - UI
   */

  ui_clear_spinner = function() {
    return Spinners.get('#results_container').remove();
  };

  ui_display_front_page_alert = function(message) {
    return $('#front_page .alert_container').append("<div class=\"alert alert-warning\">\n  <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n  " + message + "\n</div>");
  };

  ui_display_results_page_alert = function(message) {
    return $('#results_page .alert_container').append("<div class=\"alert alert-warning\">\n  <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n  " + message + "\n</div>");
  };

  ui_display_the_front_page = function() {
    $('#results_page').hide();
    $('.alert_container').html('');
    $('#front_page').show();
    $('#q').select();
    return get_and_display_the_datasets_of_the_selected_endpoint();
  };

  ui_display_the_results_page = function() {
    $('#front_page').hide();
    if (are_we_in_dataset_mode()) {
      $('#results_page').attr('class', 'dataset');
    } else {
      $('#results_page').attr('class', 'generic');
    }
    $('.alert_container').html('');
    return $('#results_page').show();
  };

  ui_get_and_display_the_total_results_count = function() {
    return $.ajax({
      url: '/query/get_subjects_count',
      type: 'POST',
      data: JSON.stringify({
        endpoint_url: $('body').data('endpoint'),
        search_type: $('body').data('search_type'),
        predicates: $('body').data('predicates'),
        dataset: $('body').data('dataset')
      })
    }).done(function(data) {
      $('body').data('total_results_count', data['subjects_count']);
      $('#total_results_count').html(data['subjects_count']);
      ui_update_the_results_count();
      $('#results_count').show();
      return log_sparql_query_runtime(data['runtime'], 'for getting the subjects count', data['query']);
    });
  };

  ui_display_spinner = function() {
    return Spinners.create('#results_container', {
      radius: 20,
      dashes: 18,
      width: 5,
      height: 20,
      opacity: .3,
      padding: 20,
      rotation: 600,
      color: '#000000'
    }).play();
  };

  ui_update_the_load_more_results_area = function(number_of_received_subjects) {
    var amount_loadable_results;
    if (parseInt(number_of_received_subjects) === $('body').data('BATCH_SIZE')) {
      amount_loadable_results = $('body').data('total_results_count') - $('body').data('subjects').length;
      $('div#load_more').html('');
      if (amount_loadable_results > $('body').data('BATCH_SIZE')) {
        $('div#load_more').append("<button class='btn btn-default' id='load_small' type='button'\ndata-amount='" + ($('body').data('BATCH_SIZE')) + "'>\n  Load " + ($('body').data('BATCH_SIZE')) + " more results\n</button>");
      }
      if (amount_loadable_results > $('body').data('BIG_LOAD_SIZE')) {
        $('div#load_more').append("<button class='btn btn-default' id='load_big' type='button'\ndata-amount='" + ($('body').data('BIG_LOAD_SIZE')) + "'>\n  Load " + ($('body').data('BIG_LOAD_SIZE')) + " more results\n</button>");
      } else if (amount_loadable_results > 0) {
        $('div#load_more').append("<button class='btn btn-default' id='load_all' type='button'\ndata-amount='" + amount_loadable_results + "'>\n  Load all results\n</button>");
      }
    } else {
      $('div#load_more').html('');
    }
    return Spinners.removeDetached();
  };

  ui_update_the_results_count = function() {
    return $('.current_results_count').each(function() {
      return $(this).html($('body').data('subjects').length);
    });
  };

}).call(this);
