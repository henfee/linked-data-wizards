# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  # Here we use the official Ubuntu Server 14.04 LTS (Trusty Tahr) 64-bit box.
  config.vm.box = "ubuntu/trusty64"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Sync the base project folder to /vagrant in the VM
  config.vm.synced_folder "..", "/vagrant"

  # VirtualBox settings
  config.vm.provider "virtualbox" do |v|
    v.name = "linked-data-wizards"
    v.memory = 512
  end

  # Fix missing locale and create swap file
  $script = <<SCRIPT
if [ -z "$LC_ALL" ]; then
	echo "Setting the missing locale ..."
	echo 'LC_ALL=en_US.UTF-8' >> /etc/default/locale
fi

if [ ! -f /swapfile ]; then
fallocate -l 512M /swapfile
chmod 600 /swapfile
mkswap /swapfile
swapon /swapfile
echo "/swapfile none swap sw 0 0" >> /etc/fstab
fi
SCRIPT
  config.vm.provision "shell", inline: $script

  # Run the Docker provisioner
  config.vm.provision "docker" do |d|
    # Pin the Docker version
    d.version = "1.4.1"

    # Create the coffeemaker Docker image
    d.build_image "/vagrant/dev/coffeemaker",
      args: "--tag=patrickhoefler/linked-data-wizards-coffeemaker"
    # Watch and compile the Query Wizard coffeescript file
    d.run "coffeemaker",
      image: "patrickhoefler/linked-data-wizards-coffeemaker",
      args: "--name=ldw-coffeemaker -v /vagrant:/vagrant --restart=always"

    # Create the Virtuoso Docker image
    d.build_image "/vagrant/dev/virtuoso",
      args: "--tag=patrickhoefler/linked-data-wizards-virtuoso"
    # Start Virtuoso
    d.run "virtuoso",
      image: "patrickhoefler/linked-data-wizards-virtuoso",
      args: "--name=ldw-virtuoso -p 8890:8890 -p 1111:1111 --restart=always"

    # Create them main Docker image
    d.build_image "/vagrant",
      args: "--tag=patrickhoefler/linked-data-wizards"
    # Initialize the DB
    d.run "dbinit",
      image: "patrickhoefler/linked-data-wizards",
      cmd: "./dbinit.sh",
      args: "--name=ldw-syncdb -v /vagrant:/usr/src/app"
    # Start the development webserver
    d.run "webserver",
      image: "patrickhoefler/linked-data-wizards",
      cmd: "python manage.py runserver 0.0.0.0:8000",
      args: "--name=ldw-dev -v /vagrant:/usr/src/app -p 8000:8000 -e SECRET_KEY='please_change_me_to_make_django_more_secure' -e LOCAL_SPARQL_ENDPOINT=http://192.168.33.10:8890/sparql -e DEBUG=True --restart=always"
  end

  # Make sure that we can use SPARQL updates in Virtuoso
  $script = <<SCRIPT
# Count how often we have tried to connect to Virtuoso
TIMEOUT_COUNTER=0

# Check if Virtuoso is ready
echo 'Granting SPARQL update rights in Virtuoso ...'
sleep 10

while ! docker exec ldw-virtuoso isql-vt exec='select 1;' &> /dev/null; do
  if ((TIMEOUT_COUNTER == 0)); then
    echo 'Waiting for Virtuoso ...'
  elif ((TIMEOUT_COUNTER == 1)); then
    echo 'Still waiting for Virtuoso ...'
  elif ((TIMEOUT_COUNTER == 2)); then
    echo 'Virtuoso failed to respond, giving up.' >&2
    exit 1
  fi

  ((TIMEOUT_COUNTER++))
  sleep 10
done

# Grant SPARQL update rights
docker exec ldw-virtuoso isql-vt exec='grant SPARQL_UPDATE to "SPARQL";' &> /dev/null

# And we're done
echo 'Finished!'
echo ' '
echo 'If you just saw any scary red messages about "Executing 3 build triggers"'
echo 'or claiming that "stdin: is not a tty", please ignore them. All is well.'
echo ' '
echo 'Your local instance of the Linked Data Wizards is now ready at'
echo 'http://192.168.33.10:8000 â€” have fun! :)'
SCRIPT
  config.vm.provision "shell", inline: $script
end
